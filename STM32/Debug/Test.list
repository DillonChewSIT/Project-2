
Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  080027c0  080027c0  000127c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027e8  080027e8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080027e8  080027e8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027e8  080027e8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027e8  080027e8  000127e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027ec  080027ec  000127ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080027f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  080027fc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080027fc  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000057ce  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001250  00000000  00000000  00025803  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000678  00000000  00000000  00026a58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000610  00000000  00000000  000270d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015dbe  00000000  00000000  000276e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006680  00000000  00000000  0003d49e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e2c7  00000000  00000000  00043b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c1de5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a94  00000000  00000000  000c1e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080027a8 	.word	0x080027a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080027a8 	.word	0x080027a8

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__gesf2>:
 8000608:	f04f 3cff 	mov.w	ip, #4294967295
 800060c:	e006      	b.n	800061c <__cmpsf2+0x4>
 800060e:	bf00      	nop

08000610 <__lesf2>:
 8000610:	f04f 0c01 	mov.w	ip, #1
 8000614:	e002      	b.n	800061c <__cmpsf2+0x4>
 8000616:	bf00      	nop

08000618 <__cmpsf2>:
 8000618:	f04f 0c01 	mov.w	ip, #1
 800061c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000620:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000624:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000628:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800062c:	bf18      	it	ne
 800062e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000632:	d011      	beq.n	8000658 <__cmpsf2+0x40>
 8000634:	b001      	add	sp, #4
 8000636:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063a:	bf18      	it	ne
 800063c:	ea90 0f01 	teqne	r0, r1
 8000640:	bf58      	it	pl
 8000642:	ebb2 0003 	subspl.w	r0, r2, r3
 8000646:	bf88      	it	hi
 8000648:	17c8      	asrhi	r0, r1, #31
 800064a:	bf38      	it	cc
 800064c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000650:	bf18      	it	ne
 8000652:	f040 0001 	orrne.w	r0, r0, #1
 8000656:	4770      	bx	lr
 8000658:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800065c:	d102      	bne.n	8000664 <__cmpsf2+0x4c>
 800065e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000662:	d105      	bne.n	8000670 <__cmpsf2+0x58>
 8000664:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000668:	d1e4      	bne.n	8000634 <__cmpsf2+0x1c>
 800066a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800066e:	d0e1      	beq.n	8000634 <__cmpsf2+0x1c>
 8000670:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <__aeabi_cfrcmple>:
 8000678:	4684      	mov	ip, r0
 800067a:	4608      	mov	r0, r1
 800067c:	4661      	mov	r1, ip
 800067e:	e7ff      	b.n	8000680 <__aeabi_cfcmpeq>

08000680 <__aeabi_cfcmpeq>:
 8000680:	b50f      	push	{r0, r1, r2, r3, lr}
 8000682:	f7ff ffc9 	bl	8000618 <__cmpsf2>
 8000686:	2800      	cmp	r0, #0
 8000688:	bf48      	it	mi
 800068a:	f110 0f00 	cmnmi.w	r0, #0
 800068e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000690 <__aeabi_fcmpeq>:
 8000690:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000694:	f7ff fff4 	bl	8000680 <__aeabi_cfcmpeq>
 8000698:	bf0c      	ite	eq
 800069a:	2001      	moveq	r0, #1
 800069c:	2000      	movne	r0, #0
 800069e:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a2:	bf00      	nop

080006a4 <__aeabi_fcmplt>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff ffea 	bl	8000680 <__aeabi_cfcmpeq>
 80006ac:	bf34      	ite	cc
 80006ae:	2001      	movcc	r0, #1
 80006b0:	2000      	movcs	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_fcmple>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffe0 	bl	8000680 <__aeabi_cfcmpeq>
 80006c0:	bf94      	ite	ls
 80006c2:	2001      	movls	r0, #1
 80006c4:	2000      	movhi	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_fcmpge>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffd2 	bl	8000678 <__aeabi_cfrcmple>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_fcmpgt>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffc8 	bl	8000678 <__aeabi_cfrcmple>
 80006e8:	bf34      	ite	cc
 80006ea:	2001      	movcc	r0, #1
 80006ec:	2000      	movcs	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2uiz>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	d20e      	bcs.n	8000716 <__aeabi_f2uiz+0x22>
 80006f8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80006fc:	d30b      	bcc.n	8000716 <__aeabi_f2uiz+0x22>
 80006fe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000702:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000706:	d409      	bmi.n	800071c <__aeabi_f2uiz+0x28>
 8000708:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800070c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000710:	fa23 f002 	lsr.w	r0, r3, r2
 8000714:	4770      	bx	lr
 8000716:	f04f 0000 	mov.w	r0, #0
 800071a:	4770      	bx	lr
 800071c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000720:	d101      	bne.n	8000726 <__aeabi_f2uiz+0x32>
 8000722:	0242      	lsls	r2, r0, #9
 8000724:	d102      	bne.n	800072c <__aeabi_f2uiz+0x38>
 8000726:	f04f 30ff 	mov.w	r0, #4294967295
 800072a:	4770      	bx	lr
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000738:	f000 fe68 	bl	800140c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073c:	f000 f80d 	bl	800075a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000740:	f000 f8ca 	bl	80008d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000744:	f000 f874 	bl	8000830 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000748:	f000 f89c 	bl	8000884 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800074c:	f000 f846 	bl	80007dc <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  getBlocks(0x01, 0x01);
 8000750:	2101      	movs	r1, #1
 8000752:	2001      	movs	r0, #1
 8000754:	f000 f92e 	bl	80009b4 <getBlocks>
 8000758:	e7fa      	b.n	8000750 <main+0x1c>

0800075a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	b090      	sub	sp, #64	; 0x40
 800075e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000760:	f107 0318 	add.w	r3, r7, #24
 8000764:	2228      	movs	r2, #40	; 0x28
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f002 f815 	bl	8002798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	2302      	movs	r3, #2
 800077e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000780:	2301      	movs	r3, #1
 8000782:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000784:	2310      	movs	r3, #16
 8000786:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000788:	2302      	movs	r3, #2
 800078a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800078c:	2300      	movs	r3, #0
 800078e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000790:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000794:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000796:	f107 0318 	add.w	r3, r7, #24
 800079a:	4618      	mov	r0, r3
 800079c:	f001 f964 	bl	8001a68 <HAL_RCC_OscConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x50>
  {
    Error_Handler();
 80007a6:	f000 fce9 	bl	800117c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	230f      	movs	r3, #15
 80007ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ae:	2302      	movs	r3, #2
 80007b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2102      	movs	r1, #2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 fbd1 	bl	8001f6c <HAL_RCC_ClockConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80007d0:	f000 fcd4 	bl	800117c <Error_Handler>
  }
}
 80007d4:	bf00      	nop
 80007d6:	3740      	adds	r7, #64	; 0x40
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_USART1_UART_Init+0x4c>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	; (800082c <MX_USART1_UART_Init+0x50>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_USART1_UART_Init+0x4c>)
 80007e8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80007ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_USART1_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_USART1_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_USART1_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_USART1_UART_Init+0x4c>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_USART1_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_USART1_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_USART1_UART_Init+0x4c>)
 8000814:	f001 fd42 	bl	800229c <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800081e:	f000 fcad 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000028 	.word	0x20000028
 800082c:	40013800 	.word	0x40013800

08000830 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000834:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000836:	4a12      	ldr	r2, [pc, #72]	; (8000880 <MX_USART2_UART_Init+0x50>)
 8000838:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <MX_USART2_UART_Init+0x4c>)
 800083c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000840:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USART2_UART_Init+0x4c>)
 800084a:	2200      	movs	r2, #0
 800084c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000856:	220c      	movs	r2, #12
 8000858:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USART2_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_USART2_UART_Init+0x4c>)
 8000868:	f001 fd18 	bl	800229c <HAL_UART_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000872:	f000 fc83 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	2000006c 	.word	0x2000006c
 8000880:	40004400 	.word	0x40004400

08000884 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <MX_USART3_UART_Init+0x50>)
 800088c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_USART3_UART_Init+0x4c>)
 80008bc:	f001 fcee 	bl	800229c <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80008c6:	f000 fc59 	bl	800117c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000b0 	.word	0x200000b0
 80008d4:	40004800 	.word	0x40004800

080008d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 0310 	add.w	r3, r7, #16
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ec:	4b2d      	ldr	r3, [pc, #180]	; (80009a4 <MX_GPIO_Init+0xcc>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	4a2c      	ldr	r2, [pc, #176]	; (80009a4 <MX_GPIO_Init+0xcc>)
 80008f2:	f043 0310 	orr.w	r3, r3, #16
 80008f6:	6193      	str	r3, [r2, #24]
 80008f8:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <MX_GPIO_Init+0xcc>)
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	f003 0310 	and.w	r3, r3, #16
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000904:	4b27      	ldr	r3, [pc, #156]	; (80009a4 <MX_GPIO_Init+0xcc>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	4a26      	ldr	r2, [pc, #152]	; (80009a4 <MX_GPIO_Init+0xcc>)
 800090a:	f043 0320 	orr.w	r3, r3, #32
 800090e:	6193      	str	r3, [r2, #24]
 8000910:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <MX_GPIO_Init+0xcc>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f003 0320 	and.w	r3, r3, #32
 8000918:	60bb      	str	r3, [r7, #8]
 800091a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091c:	4b21      	ldr	r3, [pc, #132]	; (80009a4 <MX_GPIO_Init+0xcc>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4a20      	ldr	r2, [pc, #128]	; (80009a4 <MX_GPIO_Init+0xcc>)
 8000922:	f043 0304 	orr.w	r3, r3, #4
 8000926:	6193      	str	r3, [r2, #24]
 8000928:	4b1e      	ldr	r3, [pc, #120]	; (80009a4 <MX_GPIO_Init+0xcc>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f003 0304 	and.w	r3, r3, #4
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <MX_GPIO_Init+0xcc>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	4a1a      	ldr	r2, [pc, #104]	; (80009a4 <MX_GPIO_Init+0xcc>)
 800093a:	f043 0308 	orr.w	r3, r3, #8
 800093e:	6193      	str	r3, [r2, #24]
 8000940:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <MX_GPIO_Init+0xcc>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f003 0308 	and.w	r3, r3, #8
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800094c:	2200      	movs	r2, #0
 800094e:	2120      	movs	r1, #32
 8000950:	4815      	ldr	r0, [pc, #84]	; (80009a8 <MX_GPIO_Init+0xd0>)
 8000952:	f001 f84f 	bl	80019f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000956:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800095a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <MX_GPIO_Init+0xd4>)
 800095e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	4619      	mov	r1, r3
 800096a:	4811      	ldr	r0, [pc, #68]	; (80009b0 <MX_GPIO_Init+0xd8>)
 800096c:	f000 febe 	bl	80016ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000970:	2320      	movs	r3, #32
 8000972:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000974:	2301      	movs	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2302      	movs	r3, #2
 800097e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	4619      	mov	r1, r3
 8000986:	4808      	ldr	r0, [pc, #32]	; (80009a8 <MX_GPIO_Init+0xd0>)
 8000988:	f000 feb0 	bl	80016ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	2100      	movs	r1, #0
 8000990:	2028      	movs	r0, #40	; 0x28
 8000992:	f000 fe74 	bl	800167e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000996:	2028      	movs	r0, #40	; 0x28
 8000998:	f000 fe8d 	bl	80016b6 <HAL_NVIC_EnableIRQ>

}
 800099c:	bf00      	nop
 800099e:	3720      	adds	r7, #32
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40021000 	.word	0x40021000
 80009a8:	40010800 	.word	0x40010800
 80009ac:	10110000 	.word	0x10110000
 80009b0:	40011000 	.word	0x40011000

080009b4 <getBlocks>:
\return
 state of pixy2. Returns OK if packet received is correct, returns ERROR if it is not
*/
/**************************************************************************/
void getBlocks(uint8_t sigmap, uint8_t maxBlocks)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b0cc      	sub	sp, #304	; 0x130
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4602      	mov	r2, r0
 80009bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80009c0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80009c4:	701a      	strb	r2, [r3, #0]
 80009c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80009ca:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80009ce:	460a      	mov	r2, r1
 80009d0:	701a      	strb	r2, [r3, #0]
	uint8_t tx_pixy2[] = {0xae, 0xc1, 0x20, 0x02, sigmap, maxBlocks};
 80009d2:	23ae      	movs	r3, #174	; 0xae
 80009d4:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
 80009d8:	23c1      	movs	r3, #193	; 0xc1
 80009da:	f887 3119 	strb.w	r3, [r7, #281]	; 0x119
 80009de:	2320      	movs	r3, #32
 80009e0:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
 80009e4:	2302      	movs	r3, #2
 80009e6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 80009ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80009ee:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 80009f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80009fc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
	uint8_t rx_pixy2[255];
	Block blocks;

	HAL_UART_Transmit(&huart1, (uint8_t *)tx_pixy2, sizeof(tx_pixy2), 100);
 8000a06:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8000a0a:	2364      	movs	r3, #100	; 0x64
 8000a0c:	2206      	movs	r2, #6
 8000a0e:	4877      	ldr	r0, [pc, #476]	; (8000bec <getBlocks+0x238>)
 8000a10:	f001 fc91 	bl	8002336 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, rx_pixy2, sizeof(rx_pixy2), 100);
 8000a14:	f107 0118 	add.w	r1, r7, #24
 8000a18:	2364      	movs	r3, #100	; 0x64
 8000a1a:	22ff      	movs	r2, #255	; 0xff
 8000a1c:	4873      	ldr	r0, [pc, #460]	; (8000bec <getBlocks+0x238>)
 8000a1e:	f001 fd1c 	bl	800245a <HAL_UART_Receive>
	uint16_t checksum = (rx_pixy2[4] & key) | ((rx_pixy2[5] & key) << 8);
 8000a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000a26:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000a2a:	791b      	ldrb	r3, [r3, #4]
 8000a2c:	b21a      	sxth	r2, r3
 8000a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000a32:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000a36:	795b      	ldrb	r3, [r3, #5]
 8000a38:	021b      	lsls	r3, r3, #8
 8000a3a:	b21b      	sxth	r3, r3
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	b21b      	sxth	r3, r3
 8000a40:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
	int cal_checksum = 0;
 8000a44:	2300      	movs	r3, #0
 8000a46:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

	int array_size = rx_pixy2[3];
 8000a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000a4e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000a52:	78db      	ldrb	r3, [r3, #3]
 8000a54:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120


	for(int i = 6; i < array_size+6; i++)
 8000a58:	2306      	movs	r3, #6
 8000a5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000a5e:	e012      	b.n	8000a86 <getBlocks+0xd2>
	{
		cal_checksum += rx_pixy2[i];
 8000a60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000a64:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 8000a68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000a6c:	4413      	add	r3, r2
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	461a      	mov	r2, r3
 8000a72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000a76:	4413      	add	r3, r2
 8000a78:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	for(int i = 6; i < array_size+6; i++)
 8000a7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8000a80:	3301      	adds	r3, #1
 8000a82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000a86:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000a8a:	3305      	adds	r3, #5
 8000a8c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000a90:	429a      	cmp	r2, r3
 8000a92:	dde5      	ble.n	8000a60 <getBlocks+0xac>
	}

	if (cal_checksum == checksum)
 8000a94:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8000a98:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	f040 809f 	bne.w	8000be0 <getBlocks+0x22c>
	{
		if (cal_checksum == 0 )
 8000aa2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d102      	bne.n	8000ab0 <getBlocks+0xfc>
		{
			Stop();
 8000aaa:	f000 fadd 	bl	8001068 <Stop>
			blocks.age = rx_pixy2[19];
			getDirection(blocks);
		}

	}
}
 8000aae:	e097      	b.n	8000be0 <getBlocks+0x22c>
			blocks.signature = (rx_pixy2[6] & key) | ((rx_pixy2[7] & key) << 8);
 8000ab0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ab4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000ab8:	799b      	ldrb	r3, [r3, #6]
 8000aba:	b21a      	sxth	r2, r3
 8000abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ac0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000ac4:	79db      	ldrb	r3, [r3, #7]
 8000ac6:	021b      	lsls	r3, r3, #8
 8000ac8:	b21b      	sxth	r3, r3
 8000aca:	4313      	orrs	r3, r2
 8000acc:	b21b      	sxth	r3, r3
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ad4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000ad8:	801a      	strh	r2, [r3, #0]
			blocks.x = (rx_pixy2[8] & key) | ((rx_pixy2[9] & key) << 8);
 8000ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ade:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000ae2:	7a1b      	ldrb	r3, [r3, #8]
 8000ae4:	b21a      	sxth	r2, r3
 8000ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000aea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000aee:	7a5b      	ldrb	r3, [r3, #9]
 8000af0:	021b      	lsls	r3, r3, #8
 8000af2:	b21b      	sxth	r3, r3
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b21b      	sxth	r3, r3
 8000af8:	b29a      	uxth	r2, r3
 8000afa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000afe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000b02:	805a      	strh	r2, [r3, #2]
			blocks.y = (rx_pixy2[10] & key) | ((rx_pixy2[11] & key) << 8);
 8000b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b08:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000b0c:	7a9b      	ldrb	r3, [r3, #10]
 8000b0e:	b21a      	sxth	r2, r3
 8000b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b14:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000b18:	7adb      	ldrb	r3, [r3, #11]
 8000b1a:	021b      	lsls	r3, r3, #8
 8000b1c:	b21b      	sxth	r3, r3
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	b21b      	sxth	r3, r3
 8000b22:	b29a      	uxth	r2, r3
 8000b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b28:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000b2c:	809a      	strh	r2, [r3, #4]
			blocks.width = (rx_pixy2[12] & key) | ((rx_pixy2[13] & key) << 8);
 8000b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b32:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000b36:	7b1b      	ldrb	r3, [r3, #12]
 8000b38:	b21a      	sxth	r2, r3
 8000b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b3e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000b42:	7b5b      	ldrb	r3, [r3, #13]
 8000b44:	021b      	lsls	r3, r3, #8
 8000b46:	b21b      	sxth	r3, r3
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	b21b      	sxth	r3, r3
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b52:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000b56:	80da      	strh	r2, [r3, #6]
			blocks.height = (rx_pixy2[14] & key) | ((rx_pixy2[15] & key) << 8);
 8000b58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b5c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000b60:	7b9b      	ldrb	r3, [r3, #14]
 8000b62:	b21a      	sxth	r2, r3
 8000b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b68:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000b6c:	7bdb      	ldrb	r3, [r3, #15]
 8000b6e:	021b      	lsls	r3, r3, #8
 8000b70:	b21b      	sxth	r3, r3
 8000b72:	4313      	orrs	r3, r2
 8000b74:	b21b      	sxth	r3, r3
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b7c:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000b80:	811a      	strh	r2, [r3, #8]
			blocks.angle = (rx_pixy2[16] & key) | ((rx_pixy2[17] & key) << 8);
 8000b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b86:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000b8a:	7c1b      	ldrb	r3, [r3, #16]
 8000b8c:	b21a      	sxth	r2, r3
 8000b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000b92:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000b96:	7c5b      	ldrb	r3, [r3, #17]
 8000b98:	021b      	lsls	r3, r3, #8
 8000b9a:	b21b      	sxth	r3, r3
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	b21a      	sxth	r2, r3
 8000ba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000ba4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000ba8:	815a      	strh	r2, [r3, #10]
			blocks.index = rx_pixy2[18];
 8000baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000bae:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000bb2:	7c9a      	ldrb	r2, [r3, #18]
 8000bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000bb8:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000bbc:	731a      	strb	r2, [r3, #12]
			blocks.age = rx_pixy2[19];
 8000bbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000bc2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000bc6:	7cda      	ldrb	r2, [r3, #19]
 8000bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000bcc:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000bd0:	735a      	strb	r2, [r3, #13]
			getDirection(blocks);
 8000bd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8000bd6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8000bda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bdc:	f000 f808 	bl	8000bf0 <getDirection>
}
 8000be0:	bf00      	nop
 8000be2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20000028 	.word	0x20000028

08000bf0 <getDirection>:
- getDirection
  transmit a direction based on the area and coordinates of a block
*/
/**************************************************************************/
void getDirection(Block blocks)
{
 8000bf0:	b590      	push	{r4, r7, lr}
 8000bf2:	b08b      	sub	sp, #44	; 0x2c
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	463c      	mov	r4, r7
 8000bf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int x = (int) blocks.x; // x center of the block
 8000bfc:	887b      	ldrh	r3, [r7, #2]
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
	int y = (int) blocks.y; // y center of the block
 8000c00:	88bb      	ldrh	r3, [r7, #4]
 8000c02:	623b      	str	r3, [r7, #32]

	int area = (int) blocks.width * (int) blocks.height; //area of the block
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	893a      	ldrh	r2, [r7, #8]
 8000c08:	fb02 f303 	mul.w	r3, r2, r3
 8000c0c:	61fb      	str	r3, [r7, #28]
	int area_sz = 100*60; //area to determine if block is too close
 8000c0e:	f241 7370 	movw	r3, #6000	; 0x1770
 8000c12:	61bb      	str	r3, [r7, #24]
	char speed = SetSpeed(area, area_sz);
 8000c14:	69b9      	ldr	r1, [r7, #24]
 8000c16:	69f8      	ldr	r0, [r7, #28]
 8000c18:	f000 fa58 	bl	80010cc <SetSpeed>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	75fb      	strb	r3, [r7, #23]


	if(x < 178 && x > 138) //if x center of block is within the middle section of the frame
 8000c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c22:	2bb1      	cmp	r3, #177	; 0xb1
 8000c24:	dc0f      	bgt.n	8000c46 <getDirection+0x56>
 8000c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c28:	2b8a      	cmp	r3, #138	; 0x8a
 8000c2a:	dd0c      	ble.n	8000c46 <getDirection+0x56>
	{
		area<=area_sz ? Forward(speed) : Reverse(speed);
 8000c2c:	69fa      	ldr	r2, [r7, #28]
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	dc04      	bgt.n	8000c3e <getDirection+0x4e>
 8000c34:	7dfb      	ldrb	r3, [r7, #23]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f000 f876 	bl	8000d28 <Forward>
 8000c3c:	e003      	b.n	8000c46 <getDirection+0x56>
 8000c3e:	7dfb      	ldrb	r3, [r7, #23]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f000 f8a5 	bl	8000d90 <Reverse>
	}
	if (x >= 178) //if x center of block is within the right section of the frame
 8000c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c48:	2bb1      	cmp	r3, #177	; 0xb1
 8000c4a:	dd32      	ble.n	8000cb2 <getDirection+0xc2>
	{
		if (y > 89 && y < 119)
 8000c4c:	6a3b      	ldr	r3, [r7, #32]
 8000c4e:	2b59      	cmp	r3, #89	; 0x59
 8000c50:	dd0f      	ble.n	8000c72 <getDirection+0x82>
 8000c52:	6a3b      	ldr	r3, [r7, #32]
 8000c54:	2b76      	cmp	r3, #118	; 0x76
 8000c56:	dc0c      	bgt.n	8000c72 <getDirection+0x82>
		{
			area <= area_sz ? Right(speed) : ReverseDiagRight(speed);
 8000c58:	69fa      	ldr	r2, [r7, #28]
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	dc04      	bgt.n	8000c6a <getDirection+0x7a>
 8000c60:	7dfb      	ldrb	r3, [r7, #23]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f998 	bl	8000f98 <Right>
 8000c68:	e003      	b.n	8000c72 <getDirection+0x82>
 8000c6a:	7dfb      	ldrb	r3, [r7, #23]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f000 f8f7 	bl	8000e60 <ReverseDiagRight>
		}
		if (y >= 119)
 8000c72:	6a3b      	ldr	r3, [r7, #32]
 8000c74:	2b76      	cmp	r3, #118	; 0x76
 8000c76:	dd0c      	ble.n	8000c92 <getDirection+0xa2>
		{
			area <= area_sz ? ForwardDiagRight(speed) : ReverseDiagRight(speed);
 8000c78:	69fa      	ldr	r2, [r7, #28]
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dc04      	bgt.n	8000c8a <getDirection+0x9a>
 8000c80:	7dfb      	ldrb	r3, [r7, #23]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f920 	bl	8000ec8 <ForwardDiagRight>
 8000c88:	e003      	b.n	8000c92 <getDirection+0xa2>
 8000c8a:	7dfb      	ldrb	r3, [r7, #23]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f000 f8e7 	bl	8000e60 <ReverseDiagRight>
		}
		if (y <= 89)
 8000c92:	6a3b      	ldr	r3, [r7, #32]
 8000c94:	2b59      	cmp	r3, #89	; 0x59
 8000c96:	dc0c      	bgt.n	8000cb2 <getDirection+0xc2>
		{
			area <= area_sz ? ForwardDiagRight(speed) : ReverseDiagRight(speed);
 8000c98:	69fa      	ldr	r2, [r7, #28]
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	dc04      	bgt.n	8000caa <getDirection+0xba>
 8000ca0:	7dfb      	ldrb	r3, [r7, #23]
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 f910 	bl	8000ec8 <ForwardDiagRight>
 8000ca8:	e003      	b.n	8000cb2 <getDirection+0xc2>
 8000caa:	7dfb      	ldrb	r3, [r7, #23]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 f8d7 	bl	8000e60 <ReverseDiagRight>
		}
	}
	if (x <= 138) //if x center of block is within the left section of the frame
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	2b8a      	cmp	r3, #138	; 0x8a
 8000cb6:	dc32      	bgt.n	8000d1e <getDirection+0x12e>
	{
		if (y > 89 && y < 119)
 8000cb8:	6a3b      	ldr	r3, [r7, #32]
 8000cba:	2b59      	cmp	r3, #89	; 0x59
 8000cbc:	dd0f      	ble.n	8000cde <getDirection+0xee>
 8000cbe:	6a3b      	ldr	r3, [r7, #32]
 8000cc0:	2b76      	cmp	r3, #118	; 0x76
 8000cc2:	dc0c      	bgt.n	8000cde <getDirection+0xee>
		{
			area <= area_sz ? Left(speed) : ReverseDiagLeft(speed);
 8000cc4:	69fa      	ldr	r2, [r7, #28]
 8000cc6:	69bb      	ldr	r3, [r7, #24]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	dc04      	bgt.n	8000cd6 <getDirection+0xe6>
 8000ccc:	7dfb      	ldrb	r3, [r7, #23]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f996 	bl	8001000 <Left>
 8000cd4:	e003      	b.n	8000cde <getDirection+0xee>
 8000cd6:	7dfb      	ldrb	r3, [r7, #23]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f000 f929 	bl	8000f30 <ReverseDiagLeft>
		}
		if (y >= 119)
 8000cde:	6a3b      	ldr	r3, [r7, #32]
 8000ce0:	2b76      	cmp	r3, #118	; 0x76
 8000ce2:	dd0c      	ble.n	8000cfe <getDirection+0x10e>
		{
			area <= area_sz ? ForwardDiagLeft(speed) : ReverseDiagLeft(speed);
 8000ce4:	69fa      	ldr	r2, [r7, #28]
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	dc04      	bgt.n	8000cf6 <getDirection+0x106>
 8000cec:	7dfb      	ldrb	r3, [r7, #23]
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f000 f882 	bl	8000df8 <ForwardDiagLeft>
 8000cf4:	e003      	b.n	8000cfe <getDirection+0x10e>
 8000cf6:	7dfb      	ldrb	r3, [r7, #23]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f000 f919 	bl	8000f30 <ReverseDiagLeft>
		}
		if (y <= 89)
 8000cfe:	6a3b      	ldr	r3, [r7, #32]
 8000d00:	2b59      	cmp	r3, #89	; 0x59
 8000d02:	dc0c      	bgt.n	8000d1e <getDirection+0x12e>
		{
			area <= area_sz ? ForwardDiagLeft(speed) : ReverseDiagLeft(speed);
 8000d04:	69fa      	ldr	r2, [r7, #28]
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	dc04      	bgt.n	8000d16 <getDirection+0x126>
 8000d0c:	7dfb      	ldrb	r3, [r7, #23]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f872 	bl	8000df8 <ForwardDiagLeft>
		}
	}


}
 8000d14:	e003      	b.n	8000d1e <getDirection+0x12e>
			area <= area_sz ? ForwardDiagLeft(speed) : ReverseDiagLeft(speed);
 8000d16:	7dfb      	ldrb	r3, [r7, #23]
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f000 f909 	bl	8000f30 <ReverseDiagLeft>
}
 8000d1e:	bf00      	nop
 8000d20:	372c      	adds	r7, #44	; 0x2c
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd90      	pop	{r4, r7, pc}
	...

08000d28 <Forward>:
void Forward(char speed) //transmit hex key for forward
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b086      	sub	sp, #24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	71fb      	strb	r3, [r7, #7]
	char direction = 0x01;
 8000d32:	2301      	movs	r3, #1
 8000d34:	74fb      	strb	r3, [r7, #19]
	char checksum = (direction ^ speed ) ^ commkey;
 8000d36:	7cfa      	ldrb	r2, [r7, #19]
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	4053      	eors	r3, r2
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8000d42:	74bb      	strb	r3, [r7, #18]
	char tmp[4] = {header, direction, speed, checksum};
 8000d44:	237a      	movs	r3, #122	; 0x7a
 8000d46:	733b      	strb	r3, [r7, #12]
 8000d48:	7cfb      	ldrb	r3, [r7, #19]
 8000d4a:	737b      	strb	r3, [r7, #13]
 8000d4c:	79fb      	ldrb	r3, [r7, #7]
 8000d4e:	73bb      	strb	r3, [r7, #14]
 8000d50:	7cbb      	ldrb	r3, [r7, #18]
 8000d52:	73fb      	strb	r3, [r7, #15]
	char temp[1];
	for (int i=0; i < 4; ++i)
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	e00f      	b.n	8000d7a <Forward+0x52>
	{
		temp[0] = tmp[i];
 8000d5a:	f107 020c 	add.w	r2, r7, #12
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	4413      	add	r3, r2
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	723b      	strb	r3, [r7, #8]
		HAL_UART_Transmit(&huart3, (uint8_t *)temp,sizeof(temp),100);
 8000d66:	f107 0108 	add.w	r1, r7, #8
 8000d6a:	2364      	movs	r3, #100	; 0x64
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	4807      	ldr	r0, [pc, #28]	; (8000d8c <Forward+0x64>)
 8000d70:	f001 fae1 	bl	8002336 <HAL_UART_Transmit>
	for (int i=0; i < 4; ++i)
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	3301      	adds	r3, #1
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	2b03      	cmp	r3, #3
 8000d7e:	ddec      	ble.n	8000d5a <Forward+0x32>
	}
}
 8000d80:	bf00      	nop
 8000d82:	bf00      	nop
 8000d84:	3718      	adds	r7, #24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	200000b0 	.word	0x200000b0

08000d90 <Reverse>:
void Reverse(char speed) //transmit hex key for reverse
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
	char direction = 0x02;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	74fb      	strb	r3, [r7, #19]
	char checksum = direction ^ speed ^ commkey;
 8000d9e:	7cfa      	ldrb	r2, [r7, #19]
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	4053      	eors	r3, r2
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8000daa:	74bb      	strb	r3, [r7, #18]
	char tmp[4] = {header, direction, speed, checksum};
 8000dac:	237a      	movs	r3, #122	; 0x7a
 8000dae:	733b      	strb	r3, [r7, #12]
 8000db0:	7cfb      	ldrb	r3, [r7, #19]
 8000db2:	737b      	strb	r3, [r7, #13]
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	73bb      	strb	r3, [r7, #14]
 8000db8:	7cbb      	ldrb	r3, [r7, #18]
 8000dba:	73fb      	strb	r3, [r7, #15]
	char temp[1];
	for (int i=0; i < 4; ++i)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	e00f      	b.n	8000de2 <Reverse+0x52>
	{
		temp[0] = tmp[i];
 8000dc2:	f107 020c 	add.w	r2, r7, #12
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	4413      	add	r3, r2
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	723b      	strb	r3, [r7, #8]
		HAL_UART_Transmit(&huart3, (uint8_t *)temp,sizeof(temp),100);
 8000dce:	f107 0108 	add.w	r1, r7, #8
 8000dd2:	2364      	movs	r3, #100	; 0x64
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	4807      	ldr	r0, [pc, #28]	; (8000df4 <Reverse+0x64>)
 8000dd8:	f001 faad 	bl	8002336 <HAL_UART_Transmit>
	for (int i=0; i < 4; ++i)
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	3301      	adds	r3, #1
 8000de0:	617b      	str	r3, [r7, #20]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	2b03      	cmp	r3, #3
 8000de6:	ddec      	ble.n	8000dc2 <Reverse+0x32>
	}
}
 8000de8:	bf00      	nop
 8000dea:	bf00      	nop
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200000b0 	.word	0x200000b0

08000df8 <ForwardDiagLeft>:
void ForwardDiagLeft(char speed) //transmit hex key for forward diagonal left
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
	char direction = 0x03;
 8000e02:	2303      	movs	r3, #3
 8000e04:	74fb      	strb	r3, [r7, #19]
	char checksum = direction ^ speed ^ commkey;
 8000e06:	7cfa      	ldrb	r2, [r7, #19]
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	4053      	eors	r3, r2
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8000e12:	74bb      	strb	r3, [r7, #18]
	char tmp[4] = {header, direction, speed, checksum};
 8000e14:	237a      	movs	r3, #122	; 0x7a
 8000e16:	733b      	strb	r3, [r7, #12]
 8000e18:	7cfb      	ldrb	r3, [r7, #19]
 8000e1a:	737b      	strb	r3, [r7, #13]
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	73bb      	strb	r3, [r7, #14]
 8000e20:	7cbb      	ldrb	r3, [r7, #18]
 8000e22:	73fb      	strb	r3, [r7, #15]
	char temp[1];
	for (int i=0; i < 4; ++i)
 8000e24:	2300      	movs	r3, #0
 8000e26:	617b      	str	r3, [r7, #20]
 8000e28:	e00f      	b.n	8000e4a <ForwardDiagLeft+0x52>
	{
		temp[0] = tmp[i];
 8000e2a:	f107 020c 	add.w	r2, r7, #12
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	4413      	add	r3, r2
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	723b      	strb	r3, [r7, #8]
		HAL_UART_Transmit(&huart3, (uint8_t *)temp,sizeof(temp),100);
 8000e36:	f107 0108 	add.w	r1, r7, #8
 8000e3a:	2364      	movs	r3, #100	; 0x64
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	4807      	ldr	r0, [pc, #28]	; (8000e5c <ForwardDiagLeft+0x64>)
 8000e40:	f001 fa79 	bl	8002336 <HAL_UART_Transmit>
	for (int i=0; i < 4; ++i)
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	3301      	adds	r3, #1
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	2b03      	cmp	r3, #3
 8000e4e:	ddec      	ble.n	8000e2a <ForwardDiagLeft+0x32>
	}
}
 8000e50:	bf00      	nop
 8000e52:	bf00      	nop
 8000e54:	3718      	adds	r7, #24
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	200000b0 	.word	0x200000b0

08000e60 <ReverseDiagRight>:
void ReverseDiagRight(char speed) //transmit hex key for reverse diagonal right
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b086      	sub	sp, #24
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
	char direction = 0x04;
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	74fb      	strb	r3, [r7, #19]
	char checksum = direction ^ speed ^ commkey;
 8000e6e:	7cfa      	ldrb	r2, [r7, #19]
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	4053      	eors	r3, r2
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8000e7a:	74bb      	strb	r3, [r7, #18]
	char tmp[4] = {header, direction, speed, checksum};
 8000e7c:	237a      	movs	r3, #122	; 0x7a
 8000e7e:	733b      	strb	r3, [r7, #12]
 8000e80:	7cfb      	ldrb	r3, [r7, #19]
 8000e82:	737b      	strb	r3, [r7, #13]
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	73bb      	strb	r3, [r7, #14]
 8000e88:	7cbb      	ldrb	r3, [r7, #18]
 8000e8a:	73fb      	strb	r3, [r7, #15]
	char temp[1];
	for (int i=0; i < 4; ++i)
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	e00f      	b.n	8000eb2 <ReverseDiagRight+0x52>
	{
		temp[0] = tmp[i];
 8000e92:	f107 020c 	add.w	r2, r7, #12
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	4413      	add	r3, r2
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	723b      	strb	r3, [r7, #8]
		HAL_UART_Transmit(&huart3, (uint8_t *)temp,sizeof(temp),100);
 8000e9e:	f107 0108 	add.w	r1, r7, #8
 8000ea2:	2364      	movs	r3, #100	; 0x64
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	4807      	ldr	r0, [pc, #28]	; (8000ec4 <ReverseDiagRight+0x64>)
 8000ea8:	f001 fa45 	bl	8002336 <HAL_UART_Transmit>
	for (int i=0; i < 4; ++i)
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	617b      	str	r3, [r7, #20]
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	2b03      	cmp	r3, #3
 8000eb6:	ddec      	ble.n	8000e92 <ReverseDiagRight+0x32>
	}
}
 8000eb8:	bf00      	nop
 8000eba:	bf00      	nop
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200000b0 	.word	0x200000b0

08000ec8 <ForwardDiagRight>:
void ForwardDiagRight(char speed) //transmit hex key for forward diagonal right
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	71fb      	strb	r3, [r7, #7]
	char direction = 0x05;
 8000ed2:	2305      	movs	r3, #5
 8000ed4:	74fb      	strb	r3, [r7, #19]
	char checksum = direction ^ speed ^ commkey;
 8000ed6:	7cfa      	ldrb	r2, [r7, #19]
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	4053      	eors	r3, r2
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8000ee2:	74bb      	strb	r3, [r7, #18]
	char tmp[4] = {header, direction, speed, checksum};
 8000ee4:	237a      	movs	r3, #122	; 0x7a
 8000ee6:	733b      	strb	r3, [r7, #12]
 8000ee8:	7cfb      	ldrb	r3, [r7, #19]
 8000eea:	737b      	strb	r3, [r7, #13]
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	73bb      	strb	r3, [r7, #14]
 8000ef0:	7cbb      	ldrb	r3, [r7, #18]
 8000ef2:	73fb      	strb	r3, [r7, #15]
	char temp[1];
	for (int i=0; i < 4; ++i)
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	e00f      	b.n	8000f1a <ForwardDiagRight+0x52>
	{
		temp[0] = tmp[i];
 8000efa:	f107 020c 	add.w	r2, r7, #12
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	4413      	add	r3, r2
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	723b      	strb	r3, [r7, #8]
		HAL_UART_Transmit(&huart3, (uint8_t *)temp,sizeof(temp),100);
 8000f06:	f107 0108 	add.w	r1, r7, #8
 8000f0a:	2364      	movs	r3, #100	; 0x64
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4807      	ldr	r0, [pc, #28]	; (8000f2c <ForwardDiagRight+0x64>)
 8000f10:	f001 fa11 	bl	8002336 <HAL_UART_Transmit>
	for (int i=0; i < 4; ++i)
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	3301      	adds	r3, #1
 8000f18:	617b      	str	r3, [r7, #20]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	ddec      	ble.n	8000efa <ForwardDiagRight+0x32>
	}
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3718      	adds	r7, #24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200000b0 	.word	0x200000b0

08000f30 <ReverseDiagLeft>:

void ReverseDiagLeft(char speed) //transmit hex key for reverse diagonal left
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
	char direction = 0x06;
 8000f3a:	2306      	movs	r3, #6
 8000f3c:	74fb      	strb	r3, [r7, #19]
	char checksum = direction ^ speed ^ commkey;
 8000f3e:	7cfa      	ldrb	r2, [r7, #19]
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	4053      	eors	r3, r2
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8000f4a:	74bb      	strb	r3, [r7, #18]
	char tmp[4] = {header, direction, speed, checksum};
 8000f4c:	237a      	movs	r3, #122	; 0x7a
 8000f4e:	733b      	strb	r3, [r7, #12]
 8000f50:	7cfb      	ldrb	r3, [r7, #19]
 8000f52:	737b      	strb	r3, [r7, #13]
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	73bb      	strb	r3, [r7, #14]
 8000f58:	7cbb      	ldrb	r3, [r7, #18]
 8000f5a:	73fb      	strb	r3, [r7, #15]
	char temp[1];
	for (int i=0; i < 4; ++i)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	e00f      	b.n	8000f82 <ReverseDiagLeft+0x52>
	{
		temp[0] = tmp[i];
 8000f62:	f107 020c 	add.w	r2, r7, #12
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	4413      	add	r3, r2
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	723b      	strb	r3, [r7, #8]
		HAL_UART_Transmit(&huart3, (uint8_t *)temp,sizeof(temp),100);
 8000f6e:	f107 0108 	add.w	r1, r7, #8
 8000f72:	2364      	movs	r3, #100	; 0x64
 8000f74:	2201      	movs	r2, #1
 8000f76:	4807      	ldr	r0, [pc, #28]	; (8000f94 <ReverseDiagLeft+0x64>)
 8000f78:	f001 f9dd 	bl	8002336 <HAL_UART_Transmit>
	for (int i=0; i < 4; ++i)
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	ddec      	ble.n	8000f62 <ReverseDiagLeft+0x32>
	}
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200000b0 	.word	0x200000b0

08000f98 <Right>:

void Right(char speed) //transmit hex key for right
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
	char direction = 0x07;
 8000fa2:	2307      	movs	r3, #7
 8000fa4:	74fb      	strb	r3, [r7, #19]
	char checksum = direction ^ speed ^ commkey;
 8000fa6:	7cfa      	ldrb	r2, [r7, #19]
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	4053      	eors	r3, r2
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8000fb2:	74bb      	strb	r3, [r7, #18]
	char tmp[4] = {header, direction, speed, checksum};
 8000fb4:	237a      	movs	r3, #122	; 0x7a
 8000fb6:	733b      	strb	r3, [r7, #12]
 8000fb8:	7cfb      	ldrb	r3, [r7, #19]
 8000fba:	737b      	strb	r3, [r7, #13]
 8000fbc:	79fb      	ldrb	r3, [r7, #7]
 8000fbe:	73bb      	strb	r3, [r7, #14]
 8000fc0:	7cbb      	ldrb	r3, [r7, #18]
 8000fc2:	73fb      	strb	r3, [r7, #15]
	char temp[1];
	for (int i=0; i < 4; ++i)
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	e00f      	b.n	8000fea <Right+0x52>
	{
		temp[0] = tmp[i];
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	723b      	strb	r3, [r7, #8]
		HAL_UART_Transmit(&huart3, (uint8_t *)temp,sizeof(temp),100);
 8000fd6:	f107 0108 	add.w	r1, r7, #8
 8000fda:	2364      	movs	r3, #100	; 0x64
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4807      	ldr	r0, [pc, #28]	; (8000ffc <Right+0x64>)
 8000fe0:	f001 f9a9 	bl	8002336 <HAL_UART_Transmit>
	for (int i=0; i < 4; ++i)
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	2b03      	cmp	r3, #3
 8000fee:	ddec      	ble.n	8000fca <Right+0x32>
	}
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3718      	adds	r7, #24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200000b0 	.word	0x200000b0

08001000 <Left>:
void Left(char speed) //transmit hex key for left
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b086      	sub	sp, #24
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	71fb      	strb	r3, [r7, #7]
	char direction = 0x08;
 800100a:	2308      	movs	r3, #8
 800100c:	74fb      	strb	r3, [r7, #19]
	char checksum = direction ^ speed ^ commkey;
 800100e:	7cfa      	ldrb	r2, [r7, #19]
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	4053      	eors	r3, r2
 8001014:	b2db      	uxtb	r3, r3
 8001016:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 800101a:	74bb      	strb	r3, [r7, #18]
	char tmp[4] = {header, direction, speed, checksum};
 800101c:	237a      	movs	r3, #122	; 0x7a
 800101e:	733b      	strb	r3, [r7, #12]
 8001020:	7cfb      	ldrb	r3, [r7, #19]
 8001022:	737b      	strb	r3, [r7, #13]
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	73bb      	strb	r3, [r7, #14]
 8001028:	7cbb      	ldrb	r3, [r7, #18]
 800102a:	73fb      	strb	r3, [r7, #15]
	char temp[1];
	for (int i=0; i < 4; ++i)
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	e00f      	b.n	8001052 <Left+0x52>
	{
		temp[0] = tmp[i];
 8001032:	f107 020c 	add.w	r2, r7, #12
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	4413      	add	r3, r2
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	723b      	strb	r3, [r7, #8]
		HAL_UART_Transmit(&huart3, (uint8_t *)temp,sizeof(temp),100);
 800103e:	f107 0108 	add.w	r1, r7, #8
 8001042:	2364      	movs	r3, #100	; 0x64
 8001044:	2201      	movs	r2, #1
 8001046:	4807      	ldr	r0, [pc, #28]	; (8001064 <Left+0x64>)
 8001048:	f001 f975 	bl	8002336 <HAL_UART_Transmit>
	for (int i=0; i < 4; ++i)
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	3301      	adds	r3, #1
 8001050:	617b      	str	r3, [r7, #20]
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	2b03      	cmp	r3, #3
 8001056:	ddec      	ble.n	8001032 <Left+0x32>
	}
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200000b0 	.word	0x200000b0

08001068 <Stop>:
void Stop()
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
	char direction = 0x09;
 800106e:	2309      	movs	r3, #9
 8001070:	72fb      	strb	r3, [r7, #11]
	char speed = 0x00;
 8001072:	2300      	movs	r3, #0
 8001074:	72bb      	strb	r3, [r7, #10]
	char checksum = direction ^ speed ^ commkey;
 8001076:	7afa      	ldrb	r2, [r7, #11]
 8001078:	7abb      	ldrb	r3, [r7, #10]
 800107a:	4053      	eors	r3, r2
 800107c:	b2db      	uxtb	r3, r3
 800107e:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 8001082:	727b      	strb	r3, [r7, #9]
	char tmp[4] = {header, direction, speed, checksum};
 8001084:	237a      	movs	r3, #122	; 0x7a
 8001086:	713b      	strb	r3, [r7, #4]
 8001088:	7afb      	ldrb	r3, [r7, #11]
 800108a:	717b      	strb	r3, [r7, #5]
 800108c:	7abb      	ldrb	r3, [r7, #10]
 800108e:	71bb      	strb	r3, [r7, #6]
 8001090:	7a7b      	ldrb	r3, [r7, #9]
 8001092:	71fb      	strb	r3, [r7, #7]
	char temp[1];
	for (int i=0; i < 4; ++i)
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	e00d      	b.n	80010b6 <Stop+0x4e>
	{
		temp[0] = tmp[i];
 800109a:	1d3a      	adds	r2, r7, #4
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	703b      	strb	r3, [r7, #0]
		HAL_UART_Transmit(&huart3, (uint8_t *)temp,sizeof(temp),100);
 80010a4:	4639      	mov	r1, r7
 80010a6:	2364      	movs	r3, #100	; 0x64
 80010a8:	2201      	movs	r2, #1
 80010aa:	4807      	ldr	r0, [pc, #28]	; (80010c8 <Stop+0x60>)
 80010ac:	f001 f943 	bl	8002336 <HAL_UART_Transmit>
	for (int i=0; i < 4; ++i)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	3301      	adds	r3, #1
 80010b4:	60fb      	str	r3, [r7, #12]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	ddee      	ble.n	800109a <Stop+0x32>
	}
}
 80010bc:	bf00      	nop
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200000b0 	.word	0x200000b0

080010cc <SetSpeed>:

char SetSpeed(int block_area, int max_block_size)
{
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
	float frame = 30000;
 80010d6:	4b26      	ldr	r3, [pc, #152]	; (8001170 <SetSpeed+0xa4>)
 80010d8:	613b      	str	r3, [r7, #16]
	char speed;
	float ratio = 25000;
 80010da:	4b26      	ldr	r3, [pc, #152]	; (8001174 <SetSpeed+0xa8>)
 80010dc:	60fb      	str	r3, [r7, #12]
	if (block_area > max_block_size)
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	dd22      	ble.n	800112c <SetSpeed+0x60>
	{
		if (block_area > frame)
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff f8ea 	bl	80002c0 <__aeabi_i2f>
 80010ec:	4603      	mov	r3, r0
 80010ee:	4619      	mov	r1, r3
 80010f0:	6938      	ldr	r0, [r7, #16]
 80010f2:	f7ff fad7 	bl	80006a4 <__aeabi_fcmplt>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d002      	beq.n	8001102 <SetSpeed+0x36>
		{
			speed = 0x00;
 80010fc:	2300      	movs	r3, #0
 80010fe:	75fb      	strb	r3, [r7, #23]
 8001100:	e031      	b.n	8001166 <SetSpeed+0x9a>
		}
		else
		{
			speed = (0x28/ratio) * (block_area);
 8001102:	68f9      	ldr	r1, [r7, #12]
 8001104:	481c      	ldr	r0, [pc, #112]	; (8001178 <SetSpeed+0xac>)
 8001106:	f7ff f9e3 	bl	80004d0 <__aeabi_fdiv>
 800110a:	4603      	mov	r3, r0
 800110c:	461c      	mov	r4, r3
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff f8d6 	bl	80002c0 <__aeabi_i2f>
 8001114:	4603      	mov	r3, r0
 8001116:	4619      	mov	r1, r3
 8001118:	4620      	mov	r0, r4
 800111a:	f7ff f925 	bl	8000368 <__aeabi_fmul>
 800111e:	4603      	mov	r3, r0
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fae7 	bl	80006f4 <__aeabi_f2uiz>
 8001126:	4603      	mov	r3, r0
 8001128:	75fb      	strb	r3, [r7, #23]
 800112a:	e01c      	b.n	8001166 <SetSpeed+0x9a>
		}
	}
	else
	{
		speed = (0x28 - ((0x28/(float)max_block_size) * block_area));
 800112c:	6838      	ldr	r0, [r7, #0]
 800112e:	f7ff f8c7 	bl	80002c0 <__aeabi_i2f>
 8001132:	4603      	mov	r3, r0
 8001134:	4619      	mov	r1, r3
 8001136:	4810      	ldr	r0, [pc, #64]	; (8001178 <SetSpeed+0xac>)
 8001138:	f7ff f9ca 	bl	80004d0 <__aeabi_fdiv>
 800113c:	4603      	mov	r3, r0
 800113e:	461c      	mov	r4, r3
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff f8bd 	bl	80002c0 <__aeabi_i2f>
 8001146:	4603      	mov	r3, r0
 8001148:	4619      	mov	r1, r3
 800114a:	4620      	mov	r0, r4
 800114c:	f7ff f90c 	bl	8000368 <__aeabi_fmul>
 8001150:	4603      	mov	r3, r0
 8001152:	4619      	mov	r1, r3
 8001154:	4808      	ldr	r0, [pc, #32]	; (8001178 <SetSpeed+0xac>)
 8001156:	f7fe fffd 	bl	8000154 <__aeabi_fsub>
 800115a:	4603      	mov	r3, r0
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff fac9 	bl	80006f4 <__aeabi_f2uiz>
 8001162:	4603      	mov	r3, r0
 8001164:	75fb      	strb	r3, [r7, #23]
	}
	return speed;
 8001166:	7dfb      	ldrb	r3, [r7, #23]
}
 8001168:	4618      	mov	r0, r3
 800116a:	371c      	adds	r7, #28
 800116c:	46bd      	mov	sp, r7
 800116e:	bd90      	pop	{r4, r7, pc}
 8001170:	46ea6000 	.word	0x46ea6000
 8001174:	46c35000 	.word	0x46c35000
 8001178:	42200000 	.word	0x42200000

0800117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001180:	b672      	cpsid	i
}
 8001182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001184:	e7fe      	b.n	8001184 <Error_Handler+0x8>
	...

08001188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800118e:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <HAL_MspInit+0x5c>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	4a14      	ldr	r2, [pc, #80]	; (80011e4 <HAL_MspInit+0x5c>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6193      	str	r3, [r2, #24]
 800119a:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_MspInit+0x5c>)
 800119c:	699b      	ldr	r3, [r3, #24]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <HAL_MspInit+0x5c>)
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	4a0e      	ldr	r2, [pc, #56]	; (80011e4 <HAL_MspInit+0x5c>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b0:	61d3      	str	r3, [r2, #28]
 80011b2:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <HAL_MspInit+0x5c>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80011be:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <HAL_MspInit+0x60>)
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <HAL_MspInit+0x60>)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	bc80      	pop	{r7}
 80011e2:	4770      	bx	lr
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40010000 	.word	0x40010000

080011ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08c      	sub	sp, #48	; 0x30
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 0320 	add.w	r3, r7, #32
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a4d      	ldr	r2, [pc, #308]	; (800133c <HAL_UART_MspInit+0x150>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d132      	bne.n	8001272 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800120c:	4b4c      	ldr	r3, [pc, #304]	; (8001340 <HAL_UART_MspInit+0x154>)
 800120e:	699b      	ldr	r3, [r3, #24]
 8001210:	4a4b      	ldr	r2, [pc, #300]	; (8001340 <HAL_UART_MspInit+0x154>)
 8001212:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001216:	6193      	str	r3, [r2, #24]
 8001218:	4b49      	ldr	r3, [pc, #292]	; (8001340 <HAL_UART_MspInit+0x154>)
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001220:	61fb      	str	r3, [r7, #28]
 8001222:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001224:	4b46      	ldr	r3, [pc, #280]	; (8001340 <HAL_UART_MspInit+0x154>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	4a45      	ldr	r2, [pc, #276]	; (8001340 <HAL_UART_MspInit+0x154>)
 800122a:	f043 0304 	orr.w	r3, r3, #4
 800122e:	6193      	str	r3, [r2, #24]
 8001230:	4b43      	ldr	r3, [pc, #268]	; (8001340 <HAL_UART_MspInit+0x154>)
 8001232:	699b      	ldr	r3, [r3, #24]
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	61bb      	str	r3, [r7, #24]
 800123a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800123c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124a:	f107 0320 	add.w	r3, r7, #32
 800124e:	4619      	mov	r1, r3
 8001250:	483c      	ldr	r0, [pc, #240]	; (8001344 <HAL_UART_MspInit+0x158>)
 8001252:	f000 fa4b 	bl	80016ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001256:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800125a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001264:	f107 0320 	add.w	r3, r7, #32
 8001268:	4619      	mov	r1, r3
 800126a:	4836      	ldr	r0, [pc, #216]	; (8001344 <HAL_UART_MspInit+0x158>)
 800126c:	f000 fa3e 	bl	80016ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001270:	e060      	b.n	8001334 <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART2)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a34      	ldr	r2, [pc, #208]	; (8001348 <HAL_UART_MspInit+0x15c>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d124      	bne.n	80012c6 <HAL_UART_MspInit+0xda>
    __HAL_RCC_USART2_CLK_ENABLE();
 800127c:	4b30      	ldr	r3, [pc, #192]	; (8001340 <HAL_UART_MspInit+0x154>)
 800127e:	69db      	ldr	r3, [r3, #28]
 8001280:	4a2f      	ldr	r2, [pc, #188]	; (8001340 <HAL_UART_MspInit+0x154>)
 8001282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001286:	61d3      	str	r3, [r2, #28]
 8001288:	4b2d      	ldr	r3, [pc, #180]	; (8001340 <HAL_UART_MspInit+0x154>)
 800128a:	69db      	ldr	r3, [r3, #28]
 800128c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001290:	617b      	str	r3, [r7, #20]
 8001292:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001294:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <HAL_UART_MspInit+0x154>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a29      	ldr	r2, [pc, #164]	; (8001340 <HAL_UART_MspInit+0x154>)
 800129a:	f043 0304 	orr.w	r3, r3, #4
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b27      	ldr	r3, [pc, #156]	; (8001340 <HAL_UART_MspInit+0x154>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012ac:	230c      	movs	r3, #12
 80012ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2302      	movs	r3, #2
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 0320 	add.w	r3, r7, #32
 80012bc:	4619      	mov	r1, r3
 80012be:	4821      	ldr	r0, [pc, #132]	; (8001344 <HAL_UART_MspInit+0x158>)
 80012c0:	f000 fa14 	bl	80016ec <HAL_GPIO_Init>
}
 80012c4:	e036      	b.n	8001334 <HAL_UART_MspInit+0x148>
  else if(huart->Instance==USART3)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a20      	ldr	r2, [pc, #128]	; (800134c <HAL_UART_MspInit+0x160>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d131      	bne.n	8001334 <HAL_UART_MspInit+0x148>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012d0:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <HAL_UART_MspInit+0x154>)
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	4a1a      	ldr	r2, [pc, #104]	; (8001340 <HAL_UART_MspInit+0x154>)
 80012d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012da:	61d3      	str	r3, [r2, #28]
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <HAL_UART_MspInit+0x154>)
 80012de:	69db      	ldr	r3, [r3, #28]
 80012e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_UART_MspInit+0x154>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4a14      	ldr	r2, [pc, #80]	; (8001340 <HAL_UART_MspInit+0x154>)
 80012ee:	f043 0308 	orr.w	r3, r3, #8
 80012f2:	6193      	str	r3, [r2, #24]
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_UART_MspInit+0x154>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f003 0308 	and.w	r3, r3, #8
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800130a:	2303      	movs	r3, #3
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130e:	f107 0320 	add.w	r3, r7, #32
 8001312:	4619      	mov	r1, r3
 8001314:	480e      	ldr	r0, [pc, #56]	; (8001350 <HAL_UART_MspInit+0x164>)
 8001316:	f000 f9e9 	bl	80016ec <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800131a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800131e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001320:	2300      	movs	r3, #0
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001328:	f107 0320 	add.w	r3, r7, #32
 800132c:	4619      	mov	r1, r3
 800132e:	4808      	ldr	r0, [pc, #32]	; (8001350 <HAL_UART_MspInit+0x164>)
 8001330:	f000 f9dc 	bl	80016ec <HAL_GPIO_Init>
}
 8001334:	bf00      	nop
 8001336:	3730      	adds	r7, #48	; 0x30
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40013800 	.word	0x40013800
 8001340:	40021000 	.word	0x40021000
 8001344:	40010800 	.word	0x40010800
 8001348:	40004400 	.word	0x40004400
 800134c:	40004800 	.word	0x40004800
 8001350:	40010c00 	.word	0x40010c00

08001354 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <NMI_Handler+0x4>

0800135a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <HardFault_Handler+0x4>

08001360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <MemManage_Handler+0x4>

08001366 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <BusFault_Handler+0x4>

0800136c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <UsageFault_Handler+0x4>

08001372 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr

0800137e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr

08001396 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800139a:	f000 f87d 	bl	8001498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013a2:	b580      	push	{r7, lr}
 80013a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80013a6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013aa:	f000 fb3b 	bl	8001a24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
	...

080013c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013c0:	480c      	ldr	r0, [pc, #48]	; (80013f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013c2:	490d      	ldr	r1, [pc, #52]	; (80013f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013c4:	4a0d      	ldr	r2, [pc, #52]	; (80013fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013c8:	e002      	b.n	80013d0 <LoopCopyDataInit>

080013ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ce:	3304      	adds	r3, #4

080013d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d4:	d3f9      	bcc.n	80013ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013d8:	4c0a      	ldr	r4, [pc, #40]	; (8001404 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013dc:	e001      	b.n	80013e2 <LoopFillZerobss>

080013de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e0:	3204      	adds	r2, #4

080013e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e4:	d3fb      	bcc.n	80013de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013e6:	f7ff ffe4 	bl	80013b2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ea:	f001 f9b1 	bl	8002750 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013ee:	f7ff f9a1 	bl	8000734 <main>
  bx lr
 80013f2:	4770      	bx	lr
  ldr r0, =_sdata
 80013f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013fc:	080027f0 	.word	0x080027f0
  ldr r2, =_sbss
 8001400:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001404:	200000f8 	.word	0x200000f8

08001408 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001408:	e7fe      	b.n	8001408 <ADC1_2_IRQHandler>
	...

0800140c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001410:	4b08      	ldr	r3, [pc, #32]	; (8001434 <HAL_Init+0x28>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a07      	ldr	r2, [pc, #28]	; (8001434 <HAL_Init+0x28>)
 8001416:	f043 0310 	orr.w	r3, r3, #16
 800141a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800141c:	2003      	movs	r0, #3
 800141e:	f000 f923 	bl	8001668 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001422:	2000      	movs	r0, #0
 8001424:	f000 f808 	bl	8001438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001428:	f7ff feae 	bl	8001188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800142c:	2300      	movs	r3, #0
}
 800142e:	4618      	mov	r0, r3
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40022000 	.word	0x40022000

08001438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_InitTick+0x54>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_InitTick+0x58>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4619      	mov	r1, r3
 800144a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001452:	fbb2 f3f3 	udiv	r3, r2, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f93b 	bl	80016d2 <HAL_SYSTICK_Config>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e00e      	b.n	8001484 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b0f      	cmp	r3, #15
 800146a:	d80a      	bhi.n	8001482 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800146c:	2200      	movs	r2, #0
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	f04f 30ff 	mov.w	r0, #4294967295
 8001474:	f000 f903 	bl	800167e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001478:	4a06      	ldr	r2, [pc, #24]	; (8001494 <HAL_InitTick+0x5c>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	e000      	b.n	8001484 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
}
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000000 	.word	0x20000000
 8001490:	20000008 	.word	0x20000008
 8001494:	20000004 	.word	0x20000004

08001498 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_IncTick+0x1c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	461a      	mov	r2, r3
 80014a2:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <HAL_IncTick+0x20>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4413      	add	r3, r2
 80014a8:	4a03      	ldr	r2, [pc, #12]	; (80014b8 <HAL_IncTick+0x20>)
 80014aa:	6013      	str	r3, [r2, #0]
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	20000008 	.word	0x20000008
 80014b8:	200000f4 	.word	0x200000f4

080014bc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return uwTick;
 80014c0:	4b02      	ldr	r3, [pc, #8]	; (80014cc <HAL_GetTick+0x10>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr
 80014cc:	200000f4 	.word	0x200000f4

080014d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014ec:	4013      	ands	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001500:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001502:	4a04      	ldr	r2, [pc, #16]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	60d3      	str	r3, [r2, #12]
}
 8001508:	bf00      	nop
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <__NVIC_GetPriorityGrouping+0x18>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	f003 0307 	and.w	r3, r3, #7
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	2b00      	cmp	r3, #0
 8001544:	db0b      	blt.n	800155e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	f003 021f 	and.w	r2, r3, #31
 800154c:	4906      	ldr	r1, [pc, #24]	; (8001568 <__NVIC_EnableIRQ+0x34>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	095b      	lsrs	r3, r3, #5
 8001554:	2001      	movs	r0, #1
 8001556:	fa00 f202 	lsl.w	r2, r0, r2
 800155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	bc80      	pop	{r7}
 8001566:	4770      	bx	lr
 8001568:	e000e100 	.word	0xe000e100

0800156c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	2b00      	cmp	r3, #0
 800157e:	db0a      	blt.n	8001596 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	b2da      	uxtb	r2, r3
 8001584:	490c      	ldr	r1, [pc, #48]	; (80015b8 <__NVIC_SetPriority+0x4c>)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	0112      	lsls	r2, r2, #4
 800158c:	b2d2      	uxtb	r2, r2
 800158e:	440b      	add	r3, r1
 8001590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001594:	e00a      	b.n	80015ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	4908      	ldr	r1, [pc, #32]	; (80015bc <__NVIC_SetPriority+0x50>)
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	f003 030f 	and.w	r3, r3, #15
 80015a2:	3b04      	subs	r3, #4
 80015a4:	0112      	lsls	r2, r2, #4
 80015a6:	b2d2      	uxtb	r2, r2
 80015a8:	440b      	add	r3, r1
 80015aa:	761a      	strb	r2, [r3, #24]
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000e100 	.word	0xe000e100
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b089      	sub	sp, #36	; 0x24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 0307 	and.w	r3, r3, #7
 80015d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f1c3 0307 	rsb	r3, r3, #7
 80015da:	2b04      	cmp	r3, #4
 80015dc:	bf28      	it	cs
 80015de:	2304      	movcs	r3, #4
 80015e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	3304      	adds	r3, #4
 80015e6:	2b06      	cmp	r3, #6
 80015e8:	d902      	bls.n	80015f0 <NVIC_EncodePriority+0x30>
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3b03      	subs	r3, #3
 80015ee:	e000      	b.n	80015f2 <NVIC_EncodePriority+0x32>
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f4:	f04f 32ff 	mov.w	r2, #4294967295
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43da      	mvns	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	401a      	ands	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001608:	f04f 31ff 	mov.w	r1, #4294967295
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	43d9      	mvns	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001618:	4313      	orrs	r3, r2
         );
}
 800161a:	4618      	mov	r0, r3
 800161c:	3724      	adds	r7, #36	; 0x24
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001634:	d301      	bcc.n	800163a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001636:	2301      	movs	r3, #1
 8001638:	e00f      	b.n	800165a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800163a:	4a0a      	ldr	r2, [pc, #40]	; (8001664 <SysTick_Config+0x40>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	3b01      	subs	r3, #1
 8001640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001642:	210f      	movs	r1, #15
 8001644:	f04f 30ff 	mov.w	r0, #4294967295
 8001648:	f7ff ff90 	bl	800156c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800164c:	4b05      	ldr	r3, [pc, #20]	; (8001664 <SysTick_Config+0x40>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001652:	4b04      	ldr	r3, [pc, #16]	; (8001664 <SysTick_Config+0x40>)
 8001654:	2207      	movs	r2, #7
 8001656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001658:	2300      	movs	r3, #0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	e000e010 	.word	0xe000e010

08001668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ff2d 	bl	80014d0 <__NVIC_SetPriorityGrouping>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800167e:	b580      	push	{r7, lr}
 8001680:	b086      	sub	sp, #24
 8001682:	af00      	add	r7, sp, #0
 8001684:	4603      	mov	r3, r0
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001690:	f7ff ff42 	bl	8001518 <__NVIC_GetPriorityGrouping>
 8001694:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	68b9      	ldr	r1, [r7, #8]
 800169a:	6978      	ldr	r0, [r7, #20]
 800169c:	f7ff ff90 	bl	80015c0 <NVIC_EncodePriority>
 80016a0:	4602      	mov	r2, r0
 80016a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a6:	4611      	mov	r1, r2
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff ff5f 	bl	800156c <__NVIC_SetPriority>
}
 80016ae:	bf00      	nop
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff35 	bl	8001534 <__NVIC_EnableIRQ>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ffa2 	bl	8001624 <SysTick_Config>
 80016e0:	4603      	mov	r3, r0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3708      	adds	r7, #8
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b08b      	sub	sp, #44	; 0x2c
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016f6:	2300      	movs	r3, #0
 80016f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016fa:	2300      	movs	r3, #0
 80016fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fe:	e169      	b.n	80019d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001700:	2201      	movs	r2, #1
 8001702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	429a      	cmp	r2, r3
 800171a:	f040 8158 	bne.w	80019ce <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	4a9a      	ldr	r2, [pc, #616]	; (800198c <HAL_GPIO_Init+0x2a0>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d05e      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001728:	4a98      	ldr	r2, [pc, #608]	; (800198c <HAL_GPIO_Init+0x2a0>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d875      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 800172e:	4a98      	ldr	r2, [pc, #608]	; (8001990 <HAL_GPIO_Init+0x2a4>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d058      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001734:	4a96      	ldr	r2, [pc, #600]	; (8001990 <HAL_GPIO_Init+0x2a4>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d86f      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 800173a:	4a96      	ldr	r2, [pc, #600]	; (8001994 <HAL_GPIO_Init+0x2a8>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d052      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001740:	4a94      	ldr	r2, [pc, #592]	; (8001994 <HAL_GPIO_Init+0x2a8>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d869      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 8001746:	4a94      	ldr	r2, [pc, #592]	; (8001998 <HAL_GPIO_Init+0x2ac>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d04c      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 800174c:	4a92      	ldr	r2, [pc, #584]	; (8001998 <HAL_GPIO_Init+0x2ac>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d863      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 8001752:	4a92      	ldr	r2, [pc, #584]	; (800199c <HAL_GPIO_Init+0x2b0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d046      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
 8001758:	4a90      	ldr	r2, [pc, #576]	; (800199c <HAL_GPIO_Init+0x2b0>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d85d      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 800175e:	2b12      	cmp	r3, #18
 8001760:	d82a      	bhi.n	80017b8 <HAL_GPIO_Init+0xcc>
 8001762:	2b12      	cmp	r3, #18
 8001764:	d859      	bhi.n	800181a <HAL_GPIO_Init+0x12e>
 8001766:	a201      	add	r2, pc, #4	; (adr r2, 800176c <HAL_GPIO_Init+0x80>)
 8001768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800176c:	080017e7 	.word	0x080017e7
 8001770:	080017c1 	.word	0x080017c1
 8001774:	080017d3 	.word	0x080017d3
 8001778:	08001815 	.word	0x08001815
 800177c:	0800181b 	.word	0x0800181b
 8001780:	0800181b 	.word	0x0800181b
 8001784:	0800181b 	.word	0x0800181b
 8001788:	0800181b 	.word	0x0800181b
 800178c:	0800181b 	.word	0x0800181b
 8001790:	0800181b 	.word	0x0800181b
 8001794:	0800181b 	.word	0x0800181b
 8001798:	0800181b 	.word	0x0800181b
 800179c:	0800181b 	.word	0x0800181b
 80017a0:	0800181b 	.word	0x0800181b
 80017a4:	0800181b 	.word	0x0800181b
 80017a8:	0800181b 	.word	0x0800181b
 80017ac:	0800181b 	.word	0x0800181b
 80017b0:	080017c9 	.word	0x080017c9
 80017b4:	080017dd 	.word	0x080017dd
 80017b8:	4a79      	ldr	r2, [pc, #484]	; (80019a0 <HAL_GPIO_Init+0x2b4>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d013      	beq.n	80017e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017be:	e02c      	b.n	800181a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	623b      	str	r3, [r7, #32]
          break;
 80017c6:	e029      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	3304      	adds	r3, #4
 80017ce:	623b      	str	r3, [r7, #32]
          break;
 80017d0:	e024      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	3308      	adds	r3, #8
 80017d8:	623b      	str	r3, [r7, #32]
          break;
 80017da:	e01f      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	330c      	adds	r3, #12
 80017e2:	623b      	str	r3, [r7, #32]
          break;
 80017e4:	e01a      	b.n	800181c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d102      	bne.n	80017f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017ee:	2304      	movs	r3, #4
 80017f0:	623b      	str	r3, [r7, #32]
          break;
 80017f2:	e013      	b.n	800181c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d105      	bne.n	8001808 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017fc:	2308      	movs	r3, #8
 80017fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	69fa      	ldr	r2, [r7, #28]
 8001804:	611a      	str	r2, [r3, #16]
          break;
 8001806:	e009      	b.n	800181c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001808:	2308      	movs	r3, #8
 800180a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	69fa      	ldr	r2, [r7, #28]
 8001810:	615a      	str	r2, [r3, #20]
          break;
 8001812:	e003      	b.n	800181c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001814:	2300      	movs	r3, #0
 8001816:	623b      	str	r3, [r7, #32]
          break;
 8001818:	e000      	b.n	800181c <HAL_GPIO_Init+0x130>
          break;
 800181a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	2bff      	cmp	r3, #255	; 0xff
 8001820:	d801      	bhi.n	8001826 <HAL_GPIO_Init+0x13a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	e001      	b.n	800182a <HAL_GPIO_Init+0x13e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3304      	adds	r3, #4
 800182a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	2bff      	cmp	r3, #255	; 0xff
 8001830:	d802      	bhi.n	8001838 <HAL_GPIO_Init+0x14c>
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	e002      	b.n	800183e <HAL_GPIO_Init+0x152>
 8001838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183a:	3b08      	subs	r3, #8
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	210f      	movs	r1, #15
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	fa01 f303 	lsl.w	r3, r1, r3
 800184c:	43db      	mvns	r3, r3
 800184e:	401a      	ands	r2, r3
 8001850:	6a39      	ldr	r1, [r7, #32]
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	fa01 f303 	lsl.w	r3, r1, r3
 8001858:	431a      	orrs	r2, r3
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 80b1 	beq.w	80019ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800186c:	4b4d      	ldr	r3, [pc, #308]	; (80019a4 <HAL_GPIO_Init+0x2b8>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a4c      	ldr	r2, [pc, #304]	; (80019a4 <HAL_GPIO_Init+0x2b8>)
 8001872:	f043 0301 	orr.w	r3, r3, #1
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b4a      	ldr	r3, [pc, #296]	; (80019a4 <HAL_GPIO_Init+0x2b8>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0301 	and.w	r3, r3, #1
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001884:	4a48      	ldr	r2, [pc, #288]	; (80019a8 <HAL_GPIO_Init+0x2bc>)
 8001886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001888:	089b      	lsrs	r3, r3, #2
 800188a:	3302      	adds	r3, #2
 800188c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001890:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001894:	f003 0303 	and.w	r3, r3, #3
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	220f      	movs	r2, #15
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	4013      	ands	r3, r2
 80018a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4a40      	ldr	r2, [pc, #256]	; (80019ac <HAL_GPIO_Init+0x2c0>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d013      	beq.n	80018d8 <HAL_GPIO_Init+0x1ec>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a3f      	ldr	r2, [pc, #252]	; (80019b0 <HAL_GPIO_Init+0x2c4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d00d      	beq.n	80018d4 <HAL_GPIO_Init+0x1e8>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a3e      	ldr	r2, [pc, #248]	; (80019b4 <HAL_GPIO_Init+0x2c8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d007      	beq.n	80018d0 <HAL_GPIO_Init+0x1e4>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a3d      	ldr	r2, [pc, #244]	; (80019b8 <HAL_GPIO_Init+0x2cc>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d101      	bne.n	80018cc <HAL_GPIO_Init+0x1e0>
 80018c8:	2303      	movs	r3, #3
 80018ca:	e006      	b.n	80018da <HAL_GPIO_Init+0x1ee>
 80018cc:	2304      	movs	r3, #4
 80018ce:	e004      	b.n	80018da <HAL_GPIO_Init+0x1ee>
 80018d0:	2302      	movs	r3, #2
 80018d2:	e002      	b.n	80018da <HAL_GPIO_Init+0x1ee>
 80018d4:	2301      	movs	r3, #1
 80018d6:	e000      	b.n	80018da <HAL_GPIO_Init+0x1ee>
 80018d8:	2300      	movs	r3, #0
 80018da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018dc:	f002 0203 	and.w	r2, r2, #3
 80018e0:	0092      	lsls	r2, r2, #2
 80018e2:	4093      	lsls	r3, r2
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018ea:	492f      	ldr	r1, [pc, #188]	; (80019a8 <HAL_GPIO_Init+0x2bc>)
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	3302      	adds	r3, #2
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d006      	beq.n	8001912 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001904:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	492c      	ldr	r1, [pc, #176]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	4313      	orrs	r3, r2
 800190e:	600b      	str	r3, [r1, #0]
 8001910:	e006      	b.n	8001920 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001912:	4b2a      	ldr	r3, [pc, #168]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	43db      	mvns	r3, r3
 800191a:	4928      	ldr	r1, [pc, #160]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800191c:	4013      	ands	r3, r2
 800191e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d006      	beq.n	800193a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800192c:	4b23      	ldr	r3, [pc, #140]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	4922      	ldr	r1, [pc, #136]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	604b      	str	r3, [r1, #4]
 8001938:	e006      	b.n	8001948 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800193a:	4b20      	ldr	r3, [pc, #128]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	43db      	mvns	r3, r3
 8001942:	491e      	ldr	r1, [pc, #120]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001944:	4013      	ands	r3, r2
 8001946:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d006      	beq.n	8001962 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001954:	4b19      	ldr	r3, [pc, #100]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	4918      	ldr	r1, [pc, #96]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	4313      	orrs	r3, r2
 800195e:	608b      	str	r3, [r1, #8]
 8001960:	e006      	b.n	8001970 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001964:	689a      	ldr	r2, [r3, #8]
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	43db      	mvns	r3, r3
 800196a:	4914      	ldr	r1, [pc, #80]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800196c:	4013      	ands	r3, r2
 800196e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d021      	beq.n	80019c0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800197c:	4b0f      	ldr	r3, [pc, #60]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	490e      	ldr	r1, [pc, #56]	; (80019bc <HAL_GPIO_Init+0x2d0>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	60cb      	str	r3, [r1, #12]
 8001988:	e021      	b.n	80019ce <HAL_GPIO_Init+0x2e2>
 800198a:	bf00      	nop
 800198c:	10320000 	.word	0x10320000
 8001990:	10310000 	.word	0x10310000
 8001994:	10220000 	.word	0x10220000
 8001998:	10210000 	.word	0x10210000
 800199c:	10120000 	.word	0x10120000
 80019a0:	10110000 	.word	0x10110000
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40010000 	.word	0x40010000
 80019ac:	40010800 	.word	0x40010800
 80019b0:	40010c00 	.word	0x40010c00
 80019b4:	40011000 	.word	0x40011000
 80019b8:	40011400 	.word	0x40011400
 80019bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019c0:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <HAL_GPIO_Init+0x304>)
 80019c2:	68da      	ldr	r2, [r3, #12]
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	43db      	mvns	r3, r3
 80019c8:	4909      	ldr	r1, [pc, #36]	; (80019f0 <HAL_GPIO_Init+0x304>)
 80019ca:	4013      	ands	r3, r2
 80019cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80019ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d0:	3301      	adds	r3, #1
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019da:	fa22 f303 	lsr.w	r3, r2, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f47f ae8e 	bne.w	8001700 <HAL_GPIO_Init+0x14>
  }
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	372c      	adds	r7, #44	; 0x2c
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	40010400 	.word	0x40010400

080019f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	460b      	mov	r3, r1
 80019fe:	807b      	strh	r3, [r7, #2]
 8001a00:	4613      	mov	r3, r2
 8001a02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a04:	787b      	ldrb	r3, [r7, #1]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a0a:	887a      	ldrh	r2, [r7, #2]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a10:	e003      	b.n	8001a1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a12:	887b      	ldrh	r3, [r7, #2]
 8001a14:	041a      	lsls	r2, r3, #16
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	611a      	str	r2, [r3, #16]
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bc80      	pop	{r7}
 8001a22:	4770      	bx	lr

08001a24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a2e:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a30:	695a      	ldr	r2, [r3, #20]
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	4013      	ands	r3, r2
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d006      	beq.n	8001a48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a3a:	4a05      	ldr	r2, [pc, #20]	; (8001a50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a3c:	88fb      	ldrh	r3, [r7, #6]
 8001a3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a40:	88fb      	ldrh	r3, [r7, #6]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f000 f806 	bl	8001a54 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40010400 	.word	0x40010400

08001a54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e272      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	f000 8087 	beq.w	8001b96 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a88:	4b92      	ldr	r3, [pc, #584]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 030c 	and.w	r3, r3, #12
 8001a90:	2b04      	cmp	r3, #4
 8001a92:	d00c      	beq.n	8001aae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a94:	4b8f      	ldr	r3, [pc, #572]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 030c 	and.w	r3, r3, #12
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d112      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x5e>
 8001aa0:	4b8c      	ldr	r3, [pc, #560]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aac:	d10b      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aae:	4b89      	ldr	r3, [pc, #548]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d06c      	beq.n	8001b94 <HAL_RCC_OscConfig+0x12c>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d168      	bne.n	8001b94 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e24c      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ace:	d106      	bne.n	8001ade <HAL_RCC_OscConfig+0x76>
 8001ad0:	4b80      	ldr	r3, [pc, #512]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a7f      	ldr	r2, [pc, #508]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ada:	6013      	str	r3, [r2, #0]
 8001adc:	e02e      	b.n	8001b3c <HAL_RCC_OscConfig+0xd4>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d10c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x98>
 8001ae6:	4b7b      	ldr	r3, [pc, #492]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a7a      	ldr	r2, [pc, #488]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001aec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	4b78      	ldr	r3, [pc, #480]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a77      	ldr	r2, [pc, #476]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001afc:	6013      	str	r3, [r2, #0]
 8001afe:	e01d      	b.n	8001b3c <HAL_RCC_OscConfig+0xd4>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b08:	d10c      	bne.n	8001b24 <HAL_RCC_OscConfig+0xbc>
 8001b0a:	4b72      	ldr	r3, [pc, #456]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a71      	ldr	r2, [pc, #452]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	4b6f      	ldr	r3, [pc, #444]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a6e      	ldr	r2, [pc, #440]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	e00b      	b.n	8001b3c <HAL_RCC_OscConfig+0xd4>
 8001b24:	4b6b      	ldr	r3, [pc, #428]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a6a      	ldr	r2, [pc, #424]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	4b68      	ldr	r3, [pc, #416]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a67      	ldr	r2, [pc, #412]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b3a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d013      	beq.n	8001b6c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b44:	f7ff fcba 	bl	80014bc <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b4c:	f7ff fcb6 	bl	80014bc <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b64      	cmp	r3, #100	; 0x64
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e200      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5e:	4b5d      	ldr	r3, [pc, #372]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0xe4>
 8001b6a:	e014      	b.n	8001b96 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fca6 	bl	80014bc <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b74:	f7ff fca2 	bl	80014bc <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b64      	cmp	r3, #100	; 0x64
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e1ec      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b86:	4b53      	ldr	r3, [pc, #332]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1f0      	bne.n	8001b74 <HAL_RCC_OscConfig+0x10c>
 8001b92:	e000      	b.n	8001b96 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d063      	beq.n	8001c6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ba2:	4b4c      	ldr	r3, [pc, #304]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00b      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bae:	4b49      	ldr	r3, [pc, #292]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d11c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x18c>
 8001bba:	4b46      	ldr	r3, [pc, #280]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d116      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bc6:	4b43      	ldr	r3, [pc, #268]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d005      	beq.n	8001bde <HAL_RCC_OscConfig+0x176>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d001      	beq.n	8001bde <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e1c0      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bde:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	695b      	ldr	r3, [r3, #20]
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4939      	ldr	r1, [pc, #228]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bf2:	e03a      	b.n	8001c6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d020      	beq.n	8001c3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bfc:	4b36      	ldr	r3, [pc, #216]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c02:	f7ff fc5b 	bl	80014bc <HAL_GetTick>
 8001c06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c08:	e008      	b.n	8001c1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c0a:	f7ff fc57 	bl	80014bc <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e1a1      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1c:	4b2d      	ldr	r3, [pc, #180]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0f0      	beq.n	8001c0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c28:	4b2a      	ldr	r3, [pc, #168]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	4927      	ldr	r1, [pc, #156]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]
 8001c3c:	e015      	b.n	8001c6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3e:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <HAL_RCC_OscConfig+0x270>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c44:	f7ff fc3a 	bl	80014bc <HAL_GetTick>
 8001c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4a:	e008      	b.n	8001c5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c4c:	f7ff fc36 	bl	80014bc <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d901      	bls.n	8001c5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	e180      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f0      	bne.n	8001c4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d03a      	beq.n	8001cec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d019      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c7e:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001c80:	2201      	movs	r2, #1
 8001c82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c84:	f7ff fc1a 	bl	80014bc <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c8c:	f7ff fc16 	bl	80014bc <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e160      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <HAL_RCC_OscConfig+0x26c>)
 8001ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca2:	f003 0302 	and.w	r3, r3, #2
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001caa:	2001      	movs	r0, #1
 8001cac:	f000 fad8 	bl	8002260 <RCC_Delay>
 8001cb0:	e01c      	b.n	8001cec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <HAL_RCC_OscConfig+0x274>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb8:	f7ff fc00 	bl	80014bc <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cbe:	e00f      	b.n	8001ce0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc0:	f7ff fbfc 	bl	80014bc <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d908      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e146      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000
 8001cd8:	42420000 	.word	0x42420000
 8001cdc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce0:	4b92      	ldr	r3, [pc, #584]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1e9      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 80a6 	beq.w	8001e46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfe:	4b8b      	ldr	r3, [pc, #556]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10d      	bne.n	8001d26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	4b88      	ldr	r3, [pc, #544]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	4a87      	ldr	r2, [pc, #540]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	61d3      	str	r3, [r2, #28]
 8001d16:	4b85      	ldr	r3, [pc, #532]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d18:	69db      	ldr	r3, [r3, #28]
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d22:	2301      	movs	r3, #1
 8001d24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d26:	4b82      	ldr	r3, [pc, #520]	; (8001f30 <HAL_RCC_OscConfig+0x4c8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d118      	bne.n	8001d64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d32:	4b7f      	ldr	r3, [pc, #508]	; (8001f30 <HAL_RCC_OscConfig+0x4c8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a7e      	ldr	r2, [pc, #504]	; (8001f30 <HAL_RCC_OscConfig+0x4c8>)
 8001d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3e:	f7ff fbbd 	bl	80014bc <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d46:	f7ff fbb9 	bl	80014bc <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b64      	cmp	r3, #100	; 0x64
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e103      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d58:	4b75      	ldr	r3, [pc, #468]	; (8001f30 <HAL_RCC_OscConfig+0x4c8>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d0f0      	beq.n	8001d46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d106      	bne.n	8001d7a <HAL_RCC_OscConfig+0x312>
 8001d6c:	4b6f      	ldr	r3, [pc, #444]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	6a1b      	ldr	r3, [r3, #32]
 8001d70:	4a6e      	ldr	r2, [pc, #440]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d72:	f043 0301 	orr.w	r3, r3, #1
 8001d76:	6213      	str	r3, [r2, #32]
 8001d78:	e02d      	b.n	8001dd6 <HAL_RCC_OscConfig+0x36e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x334>
 8001d82:	4b6a      	ldr	r3, [pc, #424]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	6a1b      	ldr	r3, [r3, #32]
 8001d86:	4a69      	ldr	r2, [pc, #420]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d88:	f023 0301 	bic.w	r3, r3, #1
 8001d8c:	6213      	str	r3, [r2, #32]
 8001d8e:	4b67      	ldr	r3, [pc, #412]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	4a66      	ldr	r2, [pc, #408]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	f023 0304 	bic.w	r3, r3, #4
 8001d98:	6213      	str	r3, [r2, #32]
 8001d9a:	e01c      	b.n	8001dd6 <HAL_RCC_OscConfig+0x36e>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	d10c      	bne.n	8001dbe <HAL_RCC_OscConfig+0x356>
 8001da4:	4b61      	ldr	r3, [pc, #388]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	4a60      	ldr	r2, [pc, #384]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001daa:	f043 0304 	orr.w	r3, r3, #4
 8001dae:	6213      	str	r3, [r2, #32]
 8001db0:	4b5e      	ldr	r3, [pc, #376]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	4a5d      	ldr	r2, [pc, #372]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6213      	str	r3, [r2, #32]
 8001dbc:	e00b      	b.n	8001dd6 <HAL_RCC_OscConfig+0x36e>
 8001dbe:	4b5b      	ldr	r3, [pc, #364]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	6a1b      	ldr	r3, [r3, #32]
 8001dc2:	4a5a      	ldr	r2, [pc, #360]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001dc4:	f023 0301 	bic.w	r3, r3, #1
 8001dc8:	6213      	str	r3, [r2, #32]
 8001dca:	4b58      	ldr	r3, [pc, #352]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	4a57      	ldr	r2, [pc, #348]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001dd0:	f023 0304 	bic.w	r3, r3, #4
 8001dd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d015      	beq.n	8001e0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dde:	f7ff fb6d 	bl	80014bc <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de4:	e00a      	b.n	8001dfc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de6:	f7ff fb69 	bl	80014bc <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e0b1      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfc:	4b4b      	ldr	r3, [pc, #300]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0ee      	beq.n	8001de6 <HAL_RCC_OscConfig+0x37e>
 8001e08:	e014      	b.n	8001e34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0a:	f7ff fb57 	bl	80014bc <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e10:	e00a      	b.n	8001e28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e12:	f7ff fb53 	bl	80014bc <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e09b      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e28:	4b40      	ldr	r3, [pc, #256]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001e2a:	6a1b      	ldr	r3, [r3, #32]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1ee      	bne.n	8001e12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e34:	7dfb      	ldrb	r3, [r7, #23]
 8001e36:	2b01      	cmp	r3, #1
 8001e38:	d105      	bne.n	8001e46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e3a:	4b3c      	ldr	r3, [pc, #240]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	4a3b      	ldr	r2, [pc, #236]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	f000 8087 	beq.w	8001f5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e50:	4b36      	ldr	r3, [pc, #216]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 030c 	and.w	r3, r3, #12
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d061      	beq.n	8001f20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d146      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e64:	4b33      	ldr	r3, [pc, #204]	; (8001f34 <HAL_RCC_OscConfig+0x4cc>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e6a:	f7ff fb27 	bl	80014bc <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e72:	f7ff fb23 	bl	80014bc <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e06d      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e84:	4b29      	ldr	r3, [pc, #164]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f0      	bne.n	8001e72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e98:	d108      	bne.n	8001eac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e9a:	4b24      	ldr	r3, [pc, #144]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	4921      	ldr	r1, [pc, #132]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001eac:	4b1f      	ldr	r3, [pc, #124]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a19      	ldr	r1, [r3, #32]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	430b      	orrs	r3, r1
 8001ebe:	491b      	ldr	r1, [pc, #108]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <HAL_RCC_OscConfig+0x4cc>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eca:	f7ff faf7 	bl	80014bc <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed2:	f7ff faf3 	bl	80014bc <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e03d      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee4:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f0      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x46a>
 8001ef0:	e035      	b.n	8001f5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <HAL_RCC_OscConfig+0x4cc>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fae0 	bl	80014bc <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f00:	f7ff fadc 	bl	80014bc <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e026      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <HAL_RCC_OscConfig+0x4c4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x498>
 8001f1e:	e01e      	b.n	8001f5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69db      	ldr	r3, [r3, #28]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d107      	bne.n	8001f38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e019      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40007000 	.word	0x40007000
 8001f34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f38:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <HAL_RCC_OscConfig+0x500>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d106      	bne.n	8001f5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d001      	beq.n	8001f5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40021000 	.word	0x40021000

08001f6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e0d0      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f80:	4b6a      	ldr	r3, [pc, #424]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d910      	bls.n	8001fb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8e:	4b67      	ldr	r3, [pc, #412]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 0207 	bic.w	r2, r3, #7
 8001f96:	4965      	ldr	r1, [pc, #404]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9e:	4b63      	ldr	r3, [pc, #396]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	683a      	ldr	r2, [r7, #0]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d001      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e0b8      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d020      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc8:	4b59      	ldr	r3, [pc, #356]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	4a58      	ldr	r2, [pc, #352]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001fce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001fd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0308 	and.w	r3, r3, #8
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d005      	beq.n	8001fec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe0:	4b53      	ldr	r3, [pc, #332]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	4a52      	ldr	r2, [pc, #328]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001fea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fec:	4b50      	ldr	r3, [pc, #320]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	494d      	ldr	r1, [pc, #308]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d040      	beq.n	800208c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d107      	bne.n	8002022 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002012:	4b47      	ldr	r3, [pc, #284]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d115      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e07f      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d107      	bne.n	800203a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202a:	4b41      	ldr	r3, [pc, #260]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d109      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e073      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203a:	4b3d      	ldr	r3, [pc, #244]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e06b      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204a:	4b39      	ldr	r3, [pc, #228]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f023 0203 	bic.w	r2, r3, #3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	4936      	ldr	r1, [pc, #216]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8002058:	4313      	orrs	r3, r2
 800205a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800205c:	f7ff fa2e 	bl	80014bc <HAL_GetTick>
 8002060:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002062:	e00a      	b.n	800207a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002064:	f7ff fa2a 	bl	80014bc <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002072:	4293      	cmp	r3, r2
 8002074:	d901      	bls.n	800207a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e053      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207a:	4b2d      	ldr	r3, [pc, #180]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f003 020c 	and.w	r2, r3, #12
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	429a      	cmp	r2, r3
 800208a:	d1eb      	bne.n	8002064 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800208c:	4b27      	ldr	r3, [pc, #156]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0307 	and.w	r3, r3, #7
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d210      	bcs.n	80020bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209a:	4b24      	ldr	r3, [pc, #144]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f023 0207 	bic.w	r2, r3, #7
 80020a2:	4922      	ldr	r1, [pc, #136]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020aa:	4b20      	ldr	r3, [pc, #128]	; (800212c <HAL_RCC_ClockConfig+0x1c0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d001      	beq.n	80020bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e032      	b.n	8002122 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0304 	and.w	r3, r3, #4
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d008      	beq.n	80020da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c8:	4b19      	ldr	r3, [pc, #100]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4916      	ldr	r1, [pc, #88]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d009      	beq.n	80020fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020e6:	4b12      	ldr	r3, [pc, #72]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	691b      	ldr	r3, [r3, #16]
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	490e      	ldr	r1, [pc, #56]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80020fa:	f000 f821 	bl	8002140 <HAL_RCC_GetSysClockFreq>
 80020fe:	4602      	mov	r2, r0
 8002100:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <HAL_RCC_ClockConfig+0x1c4>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	091b      	lsrs	r3, r3, #4
 8002106:	f003 030f 	and.w	r3, r3, #15
 800210a:	490a      	ldr	r1, [pc, #40]	; (8002134 <HAL_RCC_ClockConfig+0x1c8>)
 800210c:	5ccb      	ldrb	r3, [r1, r3]
 800210e:	fa22 f303 	lsr.w	r3, r2, r3
 8002112:	4a09      	ldr	r2, [pc, #36]	; (8002138 <HAL_RCC_ClockConfig+0x1cc>)
 8002114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002116:	4b09      	ldr	r3, [pc, #36]	; (800213c <HAL_RCC_ClockConfig+0x1d0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f7ff f98c 	bl	8001438 <HAL_InitTick>

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40022000 	.word	0x40022000
 8002130:	40021000 	.word	0x40021000
 8002134:	080027d0 	.word	0x080027d0
 8002138:	20000000 	.word	0x20000000
 800213c:	20000004 	.word	0x20000004

08002140 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002140:	b490      	push	{r4, r7}
 8002142:	b08a      	sub	sp, #40	; 0x28
 8002144:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002146:	4b29      	ldr	r3, [pc, #164]	; (80021ec <HAL_RCC_GetSysClockFreq+0xac>)
 8002148:	1d3c      	adds	r4, r7, #4
 800214a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800214c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002150:	f240 2301 	movw	r3, #513	; 0x201
 8002154:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
 800215e:	2300      	movs	r3, #0
 8002160:	627b      	str	r3, [r7, #36]	; 0x24
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800216a:	4b21      	ldr	r3, [pc, #132]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b04      	cmp	r3, #4
 8002178:	d002      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0x40>
 800217a:	2b08      	cmp	r3, #8
 800217c:	d003      	beq.n	8002186 <HAL_RCC_GetSysClockFreq+0x46>
 800217e:	e02b      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002180:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002182:	623b      	str	r3, [r7, #32]
      break;
 8002184:	e02b      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	0c9b      	lsrs	r3, r3, #18
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	3328      	adds	r3, #40	; 0x28
 8002190:	443b      	add	r3, r7
 8002192:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002196:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d012      	beq.n	80021c8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021a2:	4b13      	ldr	r3, [pc, #76]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	0c5b      	lsrs	r3, r3, #17
 80021a8:	f003 0301 	and.w	r3, r3, #1
 80021ac:	3328      	adds	r3, #40	; 0x28
 80021ae:	443b      	add	r3, r7
 80021b0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80021b4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	4a0e      	ldr	r2, [pc, #56]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021ba:	fb03 f202 	mul.w	r2, r3, r2
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
 80021c6:	e004      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	4a0b      	ldr	r2, [pc, #44]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021cc:	fb02 f303 	mul.w	r3, r2, r3
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	623b      	str	r3, [r7, #32]
      break;
 80021d6:	e002      	b.n	80021de <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021da:	623b      	str	r3, [r7, #32]
      break;
 80021dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021de:	6a3b      	ldr	r3, [r7, #32]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3728      	adds	r7, #40	; 0x28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bc90      	pop	{r4, r7}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	080027c0 	.word	0x080027c0
 80021f0:	40021000 	.word	0x40021000
 80021f4:	007a1200 	.word	0x007a1200
 80021f8:	003d0900 	.word	0x003d0900

080021fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002200:	4b02      	ldr	r3, [pc, #8]	; (800220c <HAL_RCC_GetHCLKFreq+0x10>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr
 800220c:	20000000 	.word	0x20000000

08002210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002214:	f7ff fff2 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 8002218:	4602      	mov	r2, r0
 800221a:	4b05      	ldr	r3, [pc, #20]	; (8002230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	0a1b      	lsrs	r3, r3, #8
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	4903      	ldr	r1, [pc, #12]	; (8002234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002226:	5ccb      	ldrb	r3, [r1, r3]
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800222c:	4618      	mov	r0, r3
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40021000 	.word	0x40021000
 8002234:	080027e0 	.word	0x080027e0

08002238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800223c:	f7ff ffde 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 8002240:	4602      	mov	r2, r0
 8002242:	4b05      	ldr	r3, [pc, #20]	; (8002258 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	0adb      	lsrs	r3, r3, #11
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	4903      	ldr	r1, [pc, #12]	; (800225c <HAL_RCC_GetPCLK2Freq+0x24>)
 800224e:	5ccb      	ldrb	r3, [r1, r3]
 8002250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002254:	4618      	mov	r0, r3
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40021000 	.word	0x40021000
 800225c:	080027e0 	.word	0x080027e0

08002260 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002268:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <RCC_Delay+0x34>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0a      	ldr	r2, [pc, #40]	; (8002298 <RCC_Delay+0x38>)
 800226e:	fba2 2303 	umull	r2, r3, r2, r3
 8002272:	0a5b      	lsrs	r3, r3, #9
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	fb02 f303 	mul.w	r3, r2, r3
 800227a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800227c:	bf00      	nop
  }
  while (Delay --);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1e5a      	subs	r2, r3, #1
 8002282:	60fa      	str	r2, [r7, #12]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f9      	bne.n	800227c <RCC_Delay+0x1c>
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr
 8002294:	20000000 	.word	0x20000000
 8002298:	10624dd3 	.word	0x10624dd3

0800229c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e03f      	b.n	800232e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d106      	bne.n	80022c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7fe ff92 	bl	80011ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2224      	movs	r2, #36	; 0x24
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f000 f9a7 	bl	8002634 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	691a      	ldr	r2, [r3, #16]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695a      	ldr	r2, [r3, #20]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002304:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68da      	ldr	r2, [r3, #12]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002314:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2220      	movs	r2, #32
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2220      	movs	r2, #32
 8002328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b08a      	sub	sp, #40	; 0x28
 800233a:	af02      	add	r7, sp, #8
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	603b      	str	r3, [r7, #0]
 8002342:	4613      	mov	r3, r2
 8002344:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b20      	cmp	r3, #32
 8002354:	d17c      	bne.n	8002450 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <HAL_UART_Transmit+0x2c>
 800235c:	88fb      	ldrh	r3, [r7, #6]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e075      	b.n	8002452 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <HAL_UART_Transmit+0x3e>
 8002370:	2302      	movs	r3, #2
 8002372:	e06e      	b.n	8002452 <HAL_UART_Transmit+0x11c>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2221      	movs	r2, #33	; 0x21
 8002386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800238a:	f7ff f897 	bl	80014bc <HAL_GetTick>
 800238e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	88fa      	ldrh	r2, [r7, #6]
 8002394:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	88fa      	ldrh	r2, [r7, #6]
 800239a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a4:	d108      	bne.n	80023b8 <HAL_UART_Transmit+0x82>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d104      	bne.n	80023b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	61bb      	str	r3, [r7, #24]
 80023b6:	e003      	b.n	80023c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2200      	movs	r2, #0
 80023c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80023c8:	e02a      	b.n	8002420 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	2200      	movs	r2, #0
 80023d2:	2180      	movs	r1, #128	; 0x80
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 f8e2 	bl	800259e <UART_WaitOnFlagUntilTimeout>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e036      	b.n	8002452 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10b      	bne.n	8002402 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	881b      	ldrh	r3, [r3, #0]
 80023ee:	461a      	mov	r2, r3
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	3302      	adds	r3, #2
 80023fe:	61bb      	str	r3, [r7, #24]
 8002400:	e007      	b.n	8002412 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	781a      	ldrb	r2, [r3, #0]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	3301      	adds	r3, #1
 8002410:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002416:	b29b      	uxth	r3, r3
 8002418:	3b01      	subs	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002424:	b29b      	uxth	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1cf      	bne.n	80023ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2200      	movs	r2, #0
 8002432:	2140      	movs	r1, #64	; 0x40
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f8b2 	bl	800259e <UART_WaitOnFlagUntilTimeout>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e006      	b.n	8002452 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	e000      	b.n	8002452 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002450:	2302      	movs	r3, #2
  }
}
 8002452:	4618      	mov	r0, r3
 8002454:	3720      	adds	r7, #32
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b08a      	sub	sp, #40	; 0x28
 800245e:	af02      	add	r7, sp, #8
 8002460:	60f8      	str	r0, [r7, #12]
 8002462:	60b9      	str	r1, [r7, #8]
 8002464:	603b      	str	r3, [r7, #0]
 8002466:	4613      	mov	r3, r2
 8002468:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b20      	cmp	r3, #32
 8002478:	f040 808c 	bne.w	8002594 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <HAL_UART_Receive+0x2e>
 8002482:	88fb      	ldrh	r3, [r7, #6]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e084      	b.n	8002596 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_UART_Receive+0x40>
 8002496:	2302      	movs	r3, #2
 8002498:	e07d      	b.n	8002596 <HAL_UART_Receive+0x13c>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	2200      	movs	r2, #0
 80024a6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2222      	movs	r2, #34	; 0x22
 80024ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024b6:	f7ff f801 	bl	80014bc <HAL_GetTick>
 80024ba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	88fa      	ldrh	r2, [r7, #6]
 80024c0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	88fa      	ldrh	r2, [r7, #6]
 80024c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d0:	d108      	bne.n	80024e4 <HAL_UART_Receive+0x8a>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d104      	bne.n	80024e4 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	e003      	b.n	80024ec <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80024f4:	e043      	b.n	800257e <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2200      	movs	r2, #0
 80024fe:	2120      	movs	r1, #32
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 f84c 	bl	800259e <UART_WaitOnFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e042      	b.n	8002596 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10c      	bne.n	8002530 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	b29b      	uxth	r3, r3
 800251e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002522:	b29a      	uxth	r2, r3
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	3302      	adds	r3, #2
 800252c:	61bb      	str	r3, [r7, #24]
 800252e:	e01f      	b.n	8002570 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002538:	d007      	beq.n	800254a <HAL_UART_Receive+0xf0>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10a      	bne.n	8002558 <HAL_UART_Receive+0xfe>
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d106      	bne.n	8002558 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	b2da      	uxtb	r2, r3
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	701a      	strb	r2, [r3, #0]
 8002556:	e008      	b.n	800256a <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	b2db      	uxtb	r3, r3
 8002560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002564:	b2da      	uxtb	r2, r3
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	3301      	adds	r3, #1
 800256e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002582:	b29b      	uxth	r3, r3
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1b6      	bne.n	80024f6 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2220      	movs	r2, #32
 800258c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002590:	2300      	movs	r3, #0
 8002592:	e000      	b.n	8002596 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002594:	2302      	movs	r3, #2
  }
}
 8002596:	4618      	mov	r0, r3
 8002598:	3720      	adds	r7, #32
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b084      	sub	sp, #16
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	603b      	str	r3, [r7, #0]
 80025aa:	4613      	mov	r3, r2
 80025ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025ae:	e02c      	b.n	800260a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b6:	d028      	beq.n	800260a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d007      	beq.n	80025ce <UART_WaitOnFlagUntilTimeout+0x30>
 80025be:	f7fe ff7d 	bl	80014bc <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d21d      	bcs.n	800260a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80025dc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695a      	ldr	r2, [r3, #20]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f022 0201 	bic.w	r2, r2, #1
 80025ec:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2220      	movs	r2, #32
 80025f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2220      	movs	r2, #32
 80025fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e00f      	b.n	800262a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	4013      	ands	r3, r2
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	429a      	cmp	r2, r3
 8002618:	bf0c      	ite	eq
 800261a:	2301      	moveq	r3, #1
 800261c:	2300      	movne	r3, #0
 800261e:	b2db      	uxtb	r3, r3
 8002620:	461a      	mov	r2, r3
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	429a      	cmp	r2, r3
 8002626:	d0c3      	beq.n	80025b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	4313      	orrs	r3, r2
 8002662:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800266e:	f023 030c 	bic.w	r3, r3, #12
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	6812      	ldr	r2, [r2, #0]
 8002676:	68b9      	ldr	r1, [r7, #8]
 8002678:	430b      	orrs	r3, r1
 800267a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	430a      	orrs	r2, r1
 8002690:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a2c      	ldr	r2, [pc, #176]	; (8002748 <UART_SetConfig+0x114>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d103      	bne.n	80026a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800269c:	f7ff fdcc 	bl	8002238 <HAL_RCC_GetPCLK2Freq>
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	e002      	b.n	80026aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80026a4:	f7ff fdb4 	bl	8002210 <HAL_RCC_GetPCLK1Freq>
 80026a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	009a      	lsls	r2, r3, #2
 80026b4:	441a      	add	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c0:	4a22      	ldr	r2, [pc, #136]	; (800274c <UART_SetConfig+0x118>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	0119      	lsls	r1, r3, #4
 80026ca:	68fa      	ldr	r2, [r7, #12]
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	009a      	lsls	r2, r3, #2
 80026d4:	441a      	add	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80026e0:	4b1a      	ldr	r3, [pc, #104]	; (800274c <UART_SetConfig+0x118>)
 80026e2:	fba3 0302 	umull	r0, r3, r3, r2
 80026e6:	095b      	lsrs	r3, r3, #5
 80026e8:	2064      	movs	r0, #100	; 0x64
 80026ea:	fb00 f303 	mul.w	r3, r0, r3
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	3332      	adds	r3, #50	; 0x32
 80026f4:	4a15      	ldr	r2, [pc, #84]	; (800274c <UART_SetConfig+0x118>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	095b      	lsrs	r3, r3, #5
 80026fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002700:	4419      	add	r1, r3
 8002702:	68fa      	ldr	r2, [r7, #12]
 8002704:	4613      	mov	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	4413      	add	r3, r2
 800270a:	009a      	lsls	r2, r3, #2
 800270c:	441a      	add	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	fbb2 f2f3 	udiv	r2, r2, r3
 8002718:	4b0c      	ldr	r3, [pc, #48]	; (800274c <UART_SetConfig+0x118>)
 800271a:	fba3 0302 	umull	r0, r3, r3, r2
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	2064      	movs	r0, #100	; 0x64
 8002722:	fb00 f303 	mul.w	r3, r0, r3
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	3332      	adds	r3, #50	; 0x32
 800272c:	4a07      	ldr	r2, [pc, #28]	; (800274c <UART_SetConfig+0x118>)
 800272e:	fba2 2303 	umull	r2, r3, r2, r3
 8002732:	095b      	lsrs	r3, r3, #5
 8002734:	f003 020f 	and.w	r2, r3, #15
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	440a      	add	r2, r1
 800273e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002740:	bf00      	nop
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40013800 	.word	0x40013800
 800274c:	51eb851f 	.word	0x51eb851f

08002750 <__libc_init_array>:
 8002750:	b570      	push	{r4, r5, r6, lr}
 8002752:	2600      	movs	r6, #0
 8002754:	4d0c      	ldr	r5, [pc, #48]	; (8002788 <__libc_init_array+0x38>)
 8002756:	4c0d      	ldr	r4, [pc, #52]	; (800278c <__libc_init_array+0x3c>)
 8002758:	1b64      	subs	r4, r4, r5
 800275a:	10a4      	asrs	r4, r4, #2
 800275c:	42a6      	cmp	r6, r4
 800275e:	d109      	bne.n	8002774 <__libc_init_array+0x24>
 8002760:	f000 f822 	bl	80027a8 <_init>
 8002764:	2600      	movs	r6, #0
 8002766:	4d0a      	ldr	r5, [pc, #40]	; (8002790 <__libc_init_array+0x40>)
 8002768:	4c0a      	ldr	r4, [pc, #40]	; (8002794 <__libc_init_array+0x44>)
 800276a:	1b64      	subs	r4, r4, r5
 800276c:	10a4      	asrs	r4, r4, #2
 800276e:	42a6      	cmp	r6, r4
 8002770:	d105      	bne.n	800277e <__libc_init_array+0x2e>
 8002772:	bd70      	pop	{r4, r5, r6, pc}
 8002774:	f855 3b04 	ldr.w	r3, [r5], #4
 8002778:	4798      	blx	r3
 800277a:	3601      	adds	r6, #1
 800277c:	e7ee      	b.n	800275c <__libc_init_array+0xc>
 800277e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002782:	4798      	blx	r3
 8002784:	3601      	adds	r6, #1
 8002786:	e7f2      	b.n	800276e <__libc_init_array+0x1e>
 8002788:	080027e8 	.word	0x080027e8
 800278c:	080027e8 	.word	0x080027e8
 8002790:	080027e8 	.word	0x080027e8
 8002794:	080027ec 	.word	0x080027ec

08002798 <memset>:
 8002798:	4603      	mov	r3, r0
 800279a:	4402      	add	r2, r0
 800279c:	4293      	cmp	r3, r2
 800279e:	d100      	bne.n	80027a2 <memset+0xa>
 80027a0:	4770      	bx	lr
 80027a2:	f803 1b01 	strb.w	r1, [r3], #1
 80027a6:	e7f9      	b.n	800279c <memset+0x4>

080027a8 <_init>:
 80027a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027aa:	bf00      	nop
 80027ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ae:	bc08      	pop	{r3}
 80027b0:	469e      	mov	lr, r3
 80027b2:	4770      	bx	lr

080027b4 <_fini>:
 80027b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b6:	bf00      	nop
 80027b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80027ba:	bc08      	pop	{r3}
 80027bc:	469e      	mov	lr, r3
 80027be:	4770      	bx	lr
